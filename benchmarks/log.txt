warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/binops.rs:2:5
  |
2 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u32`
 --> src/opencl_writer/binops.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_write_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u64`
 --> src/opencl_writer/binops.rs:4:5
  |
4 | use crate::opencl_writer::mem_interleave::emit_read_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u64`
 --> src/opencl_writer/binops.rs:5:5
  |
5 | use crate::opencl_writer::mem_interleave::emit_write_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/stackops.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u64`
 --> src/opencl_writer/stackops.rs:5:5
  |
5 | use crate::opencl_writer::mem_interleave::emit_read_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/control_flow.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/relops.rs:2:5
  |
2 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u32`
 --> src/opencl_writer/relops.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_write_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u64`
 --> src/opencl_writer/relops.rs:4:5
  |
4 | use crate::opencl_writer::mem_interleave::emit_read_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u64`
 --> src/opencl_writer/relops.rs:5:5
  |
5 | use crate::opencl_writer::mem_interleave::emit_write_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/opencl_writer/memargs.rs:5:5
  |
5 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/testops.rs:2:5
  |
2 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u32`
 --> src/opencl_writer/testops.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_write_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u64`
 --> src/opencl_writer/testops.rs:4:5
  |
4 | use crate::opencl_writer::mem_interleave::emit_read_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u64`
 --> src/opencl_writer/testops.rs:5:5
  |
5 | use crate::opencl_writer::mem_interleave::emit_write_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/convops.rs:2:5
  |
2 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u32`
 --> src/opencl_writer/convops.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_write_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u64`
 --> src/opencl_writer/convops.rs:4:5
  |
4 | use crate::opencl_writer::mem_interleave::emit_read_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u64`
 --> src/opencl_writer/convops.rs:5:5
  |
5 | use crate::opencl_writer::mem_interleave::emit_write_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/parametric.rs:2:5
  |
2 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u32`
 --> src/opencl_writer/parametric.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_write_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u64`
 --> src/opencl_writer/parametric.rs:4:5
  |
4 | use crate::opencl_writer::mem_interleave::emit_read_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u64`
 --> src/opencl_writer/parametric.rs:5:5
  |
5 | use crate::opencl_writer::mem_interleave::emit_write_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/unops.rs:2:5
  |
2 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u32`
 --> src/opencl_writer/unops.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_write_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u64`
 --> src/opencl_writer/unops.rs:4:5
  |
4 | use crate::opencl_writer::mem_interleave::emit_read_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u64`
 --> src/opencl_writer/unops.rs:5:5
  |
5 | use crate::opencl_writer::mem_interleave::emit_write_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variant `i32` should have an upper camel case name
  --> src/opencl_writer/vstack.rs:29:5
   |
29 |     i32,
   |     ^^^ help: convert the identifier to upper camel case (notice the capitalization): `I32`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: variant `i64` should have an upper camel case name
  --> src/opencl_writer/vstack.rs:30:5
   |
30 |     i64,
   |     ^^^ help: convert the identifier to upper camel case (notice the capitalization): `I64`

warning: variant `f32` should have an upper camel case name
  --> src/opencl_writer/vstack.rs:31:5
   |
31 |     f32,
   |     ^^^ help: convert the identifier to upper camel case (notice the capitalization): `F32`

warning: variant `f64` should have an upper camel case name
  --> src/opencl_writer/vstack.rs:32:5
   |
32 |     f64
   |     ^^^ help: convert the identifier to upper camel case (notice the capitalization): `F64`

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u32`
 --> src/opencl_writer/fastcalls.rs:2:5
  |
2 | use crate::opencl_writer::mem_interleave::emit_read_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u32`
 --> src/opencl_writer/fastcalls.rs:3:5
  |
3 | use crate::opencl_writer::mem_interleave::emit_write_u32;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_read_u64`
 --> src/opencl_writer/fastcalls.rs:4:5
  |
4 | use crate::opencl_writer::mem_interleave::emit_read_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::mem_interleave::emit_write_u64`
 --> src/opencl_writer/fastcalls.rs:5:5
  |
5 | use crate::opencl_writer::mem_interleave::emit_write_u64;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::StackCtx`
 --> src/opencl_writer/fastcalls.rs:6:5
  |
6 | use crate::opencl_writer::StackCtx;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::opencl_writer::StackType`
 --> src/opencl_writer/fastcalls.rs:7:5
  |
7 | use crate::opencl_writer::StackType;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::iter::FromIterator`
  --> src/opencl_writer/fastcalls.rs:11:5
   |
11 | use std::iter::FromIterator;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: variant `fastcall_false` should have an upper camel case name
  --> src/opencl_writer/fastcalls.rs:47:5
   |
47 |     fastcall_false(String), // The string is for debugging the compiler
   |     ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `FastcallFalse`

warning: variant `fastcall_true` should have an upper camel case name
  --> src/opencl_writer/fastcalls.rs:48:5
   |
48 |     fastcall_true,
   |     ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `FastcallTrue`

warning: variant `fastcall_ambiguous` should have an upper camel case name
  --> src/opencl_writer/fastcalls.rs:49:5
   |
49 |     fastcall_ambiguous(HashSet<String>)
   |     ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `FastcallAmbiguous`

warning: unused import: `crate::opencl_writer`
 --> src/opencl_writer/cfg_optimizer.rs:1:5
  |
1 | use crate::opencl_writer;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::BTreeSet`
 --> src/opencl_writer/cfg_optimizer.rs:6:5
  |
6 | use std::collections::BTreeSet;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `compile_stats::*`
  --> src/opencl_writer.rs:34:5
   |
34 | use compile_stats::*;
   |     ^^^^^^^^^^^^^^^^

warning: variant `fd_write` should have an upper camel case name
  --> src/opencl_writer.rs:75:5
   |
75 |     fd_write              = 0,
   |     ^^^^^^^^ help: convert the identifier to upper camel case: `FdWrite`

warning: variant `proc_exit` should have an upper camel case name
  --> src/opencl_writer.rs:76:5
   |
76 |     proc_exit             = 1,
   |     ^^^^^^^^^ help: convert the identifier to upper camel case: `ProcExit`

warning: variant `environ_sizes_get` should have an upper camel case name
  --> src/opencl_writer.rs:77:5
   |
77 |     environ_sizes_get     = 2,
   |     ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `EnvironSizesGet`

warning: variant `environ_get` should have an upper camel case name
  --> src/opencl_writer.rs:78:5
   |
78 |     environ_get           = 3,
   |     ^^^^^^^^^^^ help: convert the identifier to upper camel case: `EnvironGet`

warning: variant `fd_prestat_get` should have an upper camel case name
  --> src/opencl_writer.rs:79:5
   |
79 |     fd_prestat_get        = 4,
   |     ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `FdPrestatGet`

warning: variant `fd_prestat_dir_name` should have an upper camel case name
  --> src/opencl_writer.rs:80:5
   |
80 |     fd_prestat_dir_name   = 5,
   |     ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `FdPrestatDirName`

warning: variant `random_get` should have an upper camel case name
  --> src/opencl_writer.rs:81:5
   |
81 |     random_get            = 6,
   |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `RandomGet`

warning: variant `serverless_invoke` should have an upper camel case name
  --> src/opencl_writer.rs:82:5
   |
82 |     serverless_invoke     = 9999,
   |     ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ServerlessInvoke`

warning: variant `serverless_response` should have an upper camel case name
  --> src/opencl_writer.rs:83:5
   |
83 |     serverless_response   = 10000,
   |     ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ServerlessResponse`

warning: unused import: `wasi_cap_std_sync::file::*`
 --> src/opencl_runner/vectorized_vm.rs:3:5
  |
3 | use wasi_cap_std_sync::file::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `wasi_cap_std_sync::dir::Dir as WasiDir`
 --> src/opencl_runner/vectorized_vm.rs:8:5
  |
8 | use wasi_cap_std_sync::dir::Dir as WasiDir;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `wasi_common::snapshots::preview_1::wasi_snapshot_preview1::WasiSnapshotPreview1`
 --> src/opencl_runner/serverless.rs:3:5
  |
3 | use wasi_common::snapshots::preview_1::wasi_snapshot_preview1::WasiSnapshotPreview1;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `wasi_common::snapshots::preview_1::types::UserErrorConversion`
  --> src/opencl_runner/random.rs:10:5
   |
10 | use wasi_common::snapshots::preview_1::types::UserErrorConversion;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `wasmtime::*`
  --> src/opencl_runner/random.rs:12:5
   |
12 | use wasmtime::*;
   |     ^^^^^^^^^^^

warning: unused import: `wasmtime_wiggle::WasmtimeGuestMemory`
  --> src/opencl_runner/random.rs:13:5
   |
13 | use wasmtime_wiggle::WasmtimeGuestMemory;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::prelude::*`
  --> src/opencl_runner.rs:39:5
   |
39 | use std::io::prelude::*;
   |     ^^^^^^^^^^^^^^^^^^^

warning: variant `binary` should have an upper camel case name
   --> src/opencl_runner.rs:137:5
    |
137 |     binary(Vec<u8>),
    |     ^^^^^^ help: convert the identifier to upper camel case: `Binary`

warning: variant `text` should have an upper camel case name
   --> src/opencl_runner.rs:138:5
    |
138 |     text(String, String),
    |     ^^^^ help: convert the identifier to upper camel case: `Text`

warning: variant `partitioned` should have an upper camel case name
   --> src/opencl_runner.rs:139:5
    |
139 |     partitioned(HashMap<u32, String>, String, HashMap<u32, (u32, u32, u32, u32, u32, u32)>, HashMap<u32, u32>),
    |     ^^^^^^^^^^^ help: convert the identifier to upper camel case: `Partitioned`

warning: unused import: `std::collections::HashMap`
  --> src/main.rs:14:5
   |
14 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Condvar`
  --> src/main.rs:16:5
   |
16 | use std::sync::Condvar;
   |     ^^^^^^^^^^^^^^^^^^

warning: unreachable pattern
    --> src/opencl_writer.rs:1072:33
     |
1072 | ...                   _ => panic!("Unhandled parameter type")
     |                       ^
     |
     = note: `#[warn(unreachable_patterns)]` on by default

warning: unreachable pattern
    --> src/opencl_writer.rs:1379:17
     |
1361 |                 wast::Data {span, id, kind, data} => {
     |                 --------------------------------- matches any value
...
1379 |                 _ => panic!("Unknown data type"),
     |                 ^ unreachable pattern

warning: unreachable pattern
    --> src/opencl_writer.rs:1684:17
     |
1674 |                 wast::Global{span, id, exports, ty, kind} => {
     |                 ----------------------------------------- matches any value
...
1684 |                 _ => panic!("Uknown global kind found"),
     |                 ^ unreachable pattern

warning: unreachable pattern
    --> src/opencl_writer.rs:1787:17
     |
1787 |                 _ => (),
     |                 ^

warning: unused variable: `result`
   --> src/main.rs:288:13
    |
288 |         let result = ast.parse_file().unwrap();
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `result_debug`
   --> src/main.rs:289:13
    |
289 |         let result_debug = ast_debug.parse_file().unwrap();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_result_debug`

warning: unused variable: `result`
   --> src/main.rs:342:21
    |
342 |                 let result = ast.parse_file().unwrap();
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: unused variable: `result_debug`
   --> src/main.rs:343:21
    |
343 |                 let result_debug = ast_debug.parse_file().unwrap();
    |                     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_result_debug`

warning: unused variable: `kernel_hashmap`
   --> src/main.rs:351:21
    |
351 |                     kernel_hashmap,
    |                     ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kernel_hashmap`

warning: unused variable: `kernel_compile_stats`
   --> src/main.rs:352:21
    |
352 |                     kernel_compile_stats,
    |                     ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kernel_compile_stats`

warning: unused variable: `kernel_partition_mappings`
   --> src/main.rs:353:21
    |
353 |                     kernel_partition_mappings) = ast.write_opencl_file(hcall_size.try_into().unwrap(),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kernel_partition_mappings`

warning: unused variable: `result`
   --> src/main.rs:378:21
    |
378 |                 let result = ast.parse_file().unwrap();
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: unused variable: `result_debug`
   --> src/main.rs:379:21
    |
379 |                 let result_debug = ast_debug.parse_file().unwrap();
    |                     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_result_debug`

warning: unused variable: `kernel_hashmap`
   --> src/main.rs:387:21
    |
387 |                     kernel_hashmap,
    |                     ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kernel_hashmap`

warning: unused variable: `kernel_compile_stats`
   --> src/main.rs:388:21
    |
388 |                     kernel_compile_stats,
    |                     ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kernel_compile_stats`

warning: unused variable: `kernel_partition_mappings`
   --> src/main.rs:389:21
    |
389 |                     kernel_partition_mappings) = ast.write_opencl_file(hcall_size.try_into().unwrap(),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kernel_partition_mappings`

warning: unused variable: `result`
   --> src/main.rs:417:21
    |
417 |                 let result = ast.parse_file().unwrap();
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: unused variable: `result_debug`
   --> src/main.rs:418:21
    |
418 |                 let result_debug = ast_debug.parse_file().unwrap();
    |                     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_result_debug`

warning: unused variable: `compiled_kernel`
   --> src/main.rs:421:22
    |
421 |                 let (compiled_kernel,
    |                      ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compiled_kernel`

warning: unused variable: `result`
   --> src/main.rs:453:21
    |
453 |                 let result = ast.parse_file().unwrap();
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: unused variable: `result_debug`
   --> src/main.rs:454:21
    |
454 |                 let result_debug = ast_debug.parse_file().unwrap();
    |                     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_result_debug`

warning: unused variable: `compiled_kernel`
   --> src/main.rs:457:22
    |
457 |                 let (compiled_kernel,
    |                      ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compiled_kernel`

warning: unused variable: `func_type_signature`
   --> src/opencl_writer.rs:762:33
    |
762 | ...                   let func_type_signature = &self.func_map.get(id).unwrap().ty;
    |                           ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_func_type_signature`

warning: value assigned to `offset_val` is never read
    --> src/opencl_writer.rs:1356:13
     |
1356 |         let mut offset_val = 0;
     |             ^^^^^^^^^^^^^^
     |
     = note: `#[warn(unused_assignments)]` on by default
     = help: maybe it is overwritten before being read?

warning: unused variable: `span`
    --> src/opencl_writer.rs:1361:29
     |
1361 |                 wast::Data {span, id, kind, data} => {
     |                             ^^^^ help: try ignoring the field: `span: _`

warning: unused variable: `id`
    --> src/opencl_writer.rs:1361:35
     |
1361 |                 wast::Data {span, id, kind, data} => {
     |                                   ^^ help: try ignoring the field: `id: _`

warning: unused variable: `memory`
    --> src/opencl_writer.rs:1363:48
     |
1363 |                         wast::DataKind::Active{memory, offset} => {
     |                                                ^^^^^^ help: try ignoring the field: `memory: _`

warning: unused variable: `debug`
    --> src/opencl_writer.rs:1353:31
     |
1353 |     fn emit_memcpy_arr(&self, debug: bool) -> String {
     |                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `debug`
    --> src/opencl_writer.rs:1400:79
     |
1400 |     fn emit_global_init(&self, global_mappings: &HashMap<String, (u32, u32)>, debug: bool) -> String {
     |                                                                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `table`
    --> src/opencl_writer.rs:1444:48
     |
1444 |                         wast::ElemKind::Active{table, offset} => {
     |                                                ^^^^^ help: try ignoring the field: `table: _`

warning: unused variable: `debug`
    --> src/opencl_writer.rs:1437:32
     |
1437 |     fn process_elements(&self, debug: bool) -> HashMap<u32, &wast::Index> {
     |                                ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `span`
    --> src/opencl_writer.rs:1674:30
     |
1674 |                 wast::Global{span, id, exports, ty, kind} => {
     |                              ^^^^ help: try ignoring the field: `span: _`

warning: unused variable: `exports`
    --> src/opencl_writer.rs:1674:40
     |
1674 |                 wast::Global{span, id, exports, ty, kind} => {
     |                                        ^^^^^^^ help: try ignoring the field: `exports: _`

warning: unused variable: `kind`
    --> src/opencl_writer.rs:1674:53
     |
1674 |                 wast::Global{span, id, exports, ty, kind} => {
     |                                                     ^^^^ help: try ignoring the field: `kind: _`

warning: unused variable: `shared`
    --> src/opencl_writer.rs:1693:55
     |
1693 |                         wast::MemoryType::B32{limits, shared} => {
     |                                                       ^^^^^^ help: try ignoring the field: `shared: _`

warning: unused variable: `shared`
    --> src/opencl_writer.rs:1700:55
     |
1700 |                         wast::MemoryType::B64{limits, shared} => {
     |                                                       ^^^^^^ help: try ignoring the field: `shared: _`

warning: unused variable: `locals`
    --> src/opencl_writer.rs:2073:45
     |
2073 |                     (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
     |                                             ^^^^^^ help: try ignoring the field: `locals: _`

warning: unused variable: `expression`
    --> src/opencl_writer.rs:2073:53
     |
2073 |                     (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
     |                                                     ^^^^^^^^^^ help: try ignoring the field: `expression: _`

warning: unused variable: `typeuse`
    --> src/opencl_writer.rs:2073:76
     |
2073 |                     (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
     |                                                                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_typeuse`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:10:21
   |
10 | pub fn emit_i32_add(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:10:86
   |
10 | pub fn emit_i32_add(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:18:21
   |
18 | pub fn emit_i64_add(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:18:86
   |
18 | pub fn emit_i64_add(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:26:21
   |
26 | pub fn emit_f64_add(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:26:86
   |
26 | pub fn emit_f64_add(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:34:20
   |
34 | pub fn emit_f64_ne(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:34:85
   |
34 | pub fn emit_f64_ne(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:42:21
   |
42 | pub fn emit_f64_div(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:42:86
   |
42 | pub fn emit_f64_div(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:50:21
   |
50 | pub fn emit_f64_mul(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:50:86
   |
50 | pub fn emit_f64_mul(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:58:21
   |
58 | pub fn emit_i32_sub(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:58:86
   |
58 | pub fn emit_i32_sub(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:66:21
   |
66 | pub fn emit_i64_sub(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:66:86
   |
66 | pub fn emit_i64_sub(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:74:21
   |
74 | pub fn emit_i32_and(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:74:86
   |
74 | pub fn emit_i32_and(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:82:21
   |
82 | pub fn emit_i64_and(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:82:86
   |
82 | pub fn emit_i64_and(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:90:20
   |
90 | pub fn emit_i32_or(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:90:85
   |
90 | pub fn emit_i32_or(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/binops.rs:98:23
   |
98 | pub fn emit_i32_shr_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/binops.rs:98:88
   |
98 | pub fn emit_i32_shr_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:106:23
    |
106 | pub fn emit_i64_shr_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:106:88
    |
106 | pub fn emit_i64_shr_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:114:23
    |
114 | pub fn emit_i32_shr_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:114:88
    |
114 | pub fn emit_i32_shr_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:122:21
    |
122 | pub fn emit_i32_shl(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:122:86
    |
122 | pub fn emit_i32_shl(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:130:21
    |
130 | pub fn emit_i64_shl(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:130:86
    |
130 | pub fn emit_i64_shl(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:138:21
    |
138 | pub fn emit_i32_xor(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:138:86
    |
138 | pub fn emit_i32_xor(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:146:21
    |
146 | pub fn emit_i32_mul(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:146:86
    |
146 | pub fn emit_i32_mul(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:154:23
    |
154 | pub fn emit_i64_div_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:154:88
    |
154 | pub fn emit_i64_div_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:162:23
    |
162 | pub fn emit_i64_div_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:162:88
    |
162 | pub fn emit_i64_div_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:170:23
    |
170 | pub fn emit_i32_div_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:170:88
    |
170 | pub fn emit_i32_div_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:178:23
    |
178 | pub fn emit_i32_div_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:178:88
    |
178 | pub fn emit_i32_div_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:186:23
    |
186 | pub fn emit_i32_rem_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:186:88
    |
186 | pub fn emit_i32_rem_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:194:23
    |
194 | pub fn emit_i64_rem_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:194:88
    |
194 | pub fn emit_i64_rem_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:202:23
    |
202 | pub fn emit_i32_rem_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:202:88
    |
202 | pub fn emit_i32_rem_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:210:23
    |
210 | pub fn emit_i64_rem_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:210:88
    |
210 | pub fn emit_i64_rem_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:218:21
    |
218 | pub fn emit_i64_mul(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:218:86
    |
218 | pub fn emit_i64_mul(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:226:20
    |
226 | pub fn emit_i64_eq(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:226:85
    |
226 | pub fn emit_i64_eq(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:234:20
    |
234 | pub fn emit_f64_eq(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:234:85
    |
234 | pub fn emit_f64_eq(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:242:20
    |
242 | pub fn emit_i64_ne(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:242:85
    |
242 | pub fn emit_i64_ne(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:250:21
    |
250 | pub fn emit_i64_xor(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:250:86
    |
250 | pub fn emit_i64_xor(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:258:20
    |
258 | pub fn emit_i64_or(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:258:85
    |
258 | pub fn emit_i64_or(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:266:23
    |
266 | pub fn emit_i64_shr_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/binops.rs:266:88
    |
266 | pub fn emit_i64_shr_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:277:22
    |
277 | pub fn emit_i32_rotl(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `writer`
   --> src/opencl_writer/binops.rs:293:22
    |
293 | pub fn emit_i64_rotl(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `offset`
  --> src/opencl_writer/stackops.rs:13:9
   |
13 |     let offset: i32 = *offsets.get(id).unwrap() as i32 + parameter_offset;
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `writer`
  --> src/opencl_writer/stackops.rs:12:23
   |
12 | pub fn emit_local_get(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, parameter_offset: i32, id: &str, offsets: &HashMap...
   |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/stackops.rs:12:219
   |
12 | ..., stack_sizes: &mut Vec<u32>, debug: bool) -> String {
   |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `offset`
  --> src/opencl_writer/stackops.rs:50:9
   |
50 |     let offset: i32 = *offsets.get(id).unwrap() as i32 + parameter_offset;
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `writer`
  --> src/opencl_writer/stackops.rs:49:23
   |
49 | pub fn emit_local_set(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, parameter_offset: i32, id: &str, offsets: &HashMap...
   |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/stackops.rs:49:238
   |
49 | ... Vec<u32>, is_fastcall: bool, debug: bool) -> String {
   |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `offset`
  --> src/opencl_writer/stackops.rs:87:9
   |
87 |     let offset = offsets.get(id).unwrap();
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `writer`
   --> src/opencl_writer/stackops.rs:119:19
    |
119 | pub fn emit_local(writer: &opencl_writer::OpenCLCWriter, local: &wast::Local, debug: bool) -> String {
    |                   ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/stackops.rs:119:79
    |
119 | pub fn emit_local(writer: &opencl_writer::OpenCLCWriter, local: &wast::Local, debug: bool) -> String {
    |                                                                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/stackops.rs:162:23
    |
162 | pub fn emit_i32_const(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, val: &i32, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/stackops.rs:162:99
    |
162 | pub fn emit_i32_const(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, val: &i32, debug: bool) -> String {
    |                                                                                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/stackops.rs:166:23
    |
166 | pub fn emit_i64_const(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, val: &i64, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/stackops.rs:166:99
    |
166 | pub fn emit_i64_const(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, val: &i64, debug: bool) -> String {
    |                                                                                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/stackops.rs:171:23
    |
171 | pub fn emit_f32_const(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, val: &u32, debug: bool) -> String {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/stackops.rs:171:99
    |
171 | pub fn emit_f32_const(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, val: &u32, debug: bool) -> String {
    |                                                                                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/stackops.rs:182:23
    |
182 | pub fn emit_f64_const(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, val: &u64, debug: bool) -> String {    
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/stackops.rs:182:99
    |
182 | pub fn emit_f64_const(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, val: &u64, debug: bool) -> String {    
    |                                                                                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `is_loop`
  --> src/opencl_writer/control_flow.rs:73:25
   |
73 |             for (label, is_loop, _) in control_stack_copy.iter() {
   |                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_loop`

warning: unused variable: `writer`
  --> src/opencl_writer/control_flow.rs:33:16
   |
33 | pub fn emit_br(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, idx: wast::Index, fn_name: &str, control_stack: &mut Vec<...
   |                ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/control_flow.rs:33:215
   |
33 | ...str, u32>, is_fastcall: bool, debug: bool) -> String {
   |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/control_flow.rs:135:21
    |
135 | pub fn emit_end<'a>(writer: &opencl_writer::OpenCLCWriter<'a>, stack_ctx: &mut StackCtx, id: &Option<wast::Id<'a>>, label: &str, block_ty...
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `id`
   --> src/opencl_writer/control_flow.rs:135:90
    |
135 | ...r<'a>, stack_ctx: &mut StackCtx, id: &Option<wast::Id<'a>>, label: &str, block_type: u32, fn_name: &str, function_id_map: HashMap<&str...
    |                                     ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `function_id_map`
   --> src/opencl_writer/control_flow.rs:135:162
    |
135 | ...u32, fn_name: &str, function_id_map: HashMap<&str, u32>, is_fastcall: bool, debug: bool) -> String {
    |                        ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_function_id_map`

warning: unused variable: `debug`
   --> src/opencl_writer/control_flow.rs:135:218
    |
135 | ...str, u32>, is_fastcall: bool, debug: bool) -> String {
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/control_flow.rs:184:18
    |
184 | pub fn emit_loop(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, block: &wast::BlockType, label: String, branch_idx_u32:...
    |                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `block`
   --> src/opencl_writer/control_flow.rs:184:83
    |
184 | ...er, stack_ctx: &mut StackCtx, block: &wast::BlockType, label: String, branch_idx_u32: u32, fn_name: &str, function_id_map: HashMap<&st...
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_block`

warning: unused variable: `branch_idx_u32`
   --> src/opencl_writer/control_flow.rs:184:123
    |
184 | ...Type, label: String, branch_idx_u32: u32, fn_name: &str, function_id_map: HashMap<&str, u32>, call_ret_idx: &mut u32, is_fastcall: boo...
    |                         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_branch_idx_u32`

warning: unused variable: `function_id_map`
   --> src/opencl_writer/control_flow.rs:184:159
    |
184 | ...u32, fn_name: &str, function_id_map: HashMap<&str, u32>, call_ret_idx: &mut u32, is_fastcall: bool, debug: bool) -> String {
    |                        ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_function_id_map`

warning: unused variable: `debug`
   --> src/opencl_writer/control_flow.rs:184:239
    |
184 | ... &mut u32, is_fastcall: bool, debug: bool) -> String {
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/control_flow.rs:216:19
    |
216 | pub fn emit_block(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, block: &wast::BlockType, label: String, branch_idx_u32...
    |                   ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `block`
   --> src/opencl_writer/control_flow.rs:216:84
    |
216 | ...er, stack_ctx: &mut StackCtx, block: &wast::BlockType, label: String, branch_idx_u32: u32, fn_name: &str, function_id_map: HashMap<&st...
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_block`

warning: unused variable: `label`
   --> src/opencl_writer/control_flow.rs:216:109
    |
216 | ...Ctx, block: &wast::BlockType, label: String, branch_idx_u32: u32, fn_name: &str, function_id_map: HashMap<&str, u32>, is_fastcall: boo...
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_label`

warning: unused variable: `branch_idx_u32`
   --> src/opencl_writer/control_flow.rs:216:124
    |
216 | ...Type, label: String, branch_idx_u32: u32, fn_name: &str, function_id_map: HashMap<&str, u32>, is_fastcall: bool, debug: bool) -> String {
    |                         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_branch_idx_u32`

warning: unused variable: `fn_name`
   --> src/opencl_writer/control_flow.rs:216:145
    |
216 | ...tring, branch_idx_u32: u32, fn_name: &str, function_id_map: HashMap<&str, u32>, is_fastcall: bool, debug: bool) -> String {
    |                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fn_name`

warning: unused variable: `function_id_map`
   --> src/opencl_writer/control_flow.rs:216:160
    |
216 | ...u32, fn_name: &str, function_id_map: HashMap<&str, u32>, is_fastcall: bool, debug: bool) -> String {
    |                        ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_function_id_map`

warning: unused variable: `debug`
   --> src/opencl_writer/control_flow.rs:216:216
    |
216 | ...str, u32>, is_fastcall: bool, debug: bool) -> String {
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `ty`
   --> src/opencl_writer/functions.rs:348:21
    |
348 |         for (param, ty) in stack_params.iter().zip(stack_params_types.iter()) {
    |                     ^^ help: if this is intentional, prefix it with an underscore: `_ty`

warning: unused variable: `debug`
   --> src/opencl_writer/functions.rs:107:288
    |
107 | ...ect: bool, is_fastcall: bool, debug: bool) -> String {
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `debug`
   --> src/opencl_writer/functions.rs:363:186
    |
363 | ..._fn: bool, is_fastcall: bool, debug: bool) -> String {
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `inline`
   --> src/opencl_writer/functions.rs:625:18
    |
625 |         (_, Some(inline)) => panic!("Inline types for call_indirect not implemented yet"),
    |                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_inline`

warning: unused variable: `writer`
  --> src/opencl_writer/mem_interleave.rs:35:34
   |
35 | pub fn generate_read_write_calls(writer: &opencl_writer::OpenCLCWriter, interleave: u32, debug: bool) -> String {
   |                                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/mem_interleave.rs:35:90
   |
35 | pub fn generate_read_write_calls(writer: &opencl_writer::OpenCLCWriter, interleave: u32, debug: bool) -> String {
   |                                                                                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:13:20
   |
13 | pub fn emit_i32_eq(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:13:85
   |
13 | pub fn emit_i32_eq(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:21:20
   |
21 | pub fn emit_i32_ne(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:21:85
   |
21 | pub fn emit_i32_ne(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:30:22
   |
30 | pub fn emit_i32_lt_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:30:87
   |
30 | pub fn emit_i32_lt_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:38:22
   |
38 | pub fn emit_i64_lt_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:38:87
   |
38 | pub fn emit_i64_lt_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:47:22
   |
47 | pub fn emit_i32_lt_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:47:87
   |
47 | pub fn emit_i32_lt_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:55:22
   |
55 | pub fn emit_i64_lt_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:55:87
   |
55 | pub fn emit_i64_lt_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:64:22
   |
64 | pub fn emit_i32_gt_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:64:87
   |
64 | pub fn emit_i32_gt_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:72:22
   |
72 | pub fn emit_i64_gt_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:72:87
   |
72 | pub fn emit_i64_gt_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:80:22
   |
80 | pub fn emit_i64_gt_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:80:87
   |
80 | pub fn emit_i64_gt_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:89:22
   |
89 | pub fn emit_i32_gt_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:89:87
   |
89 | pub fn emit_i32_gt_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/relops.rs:98:22
   |
98 | pub fn emit_i32_ge_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/relops.rs:98:87
   |
98 | pub fn emit_i32_ge_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:107:22
    |
107 | pub fn emit_i32_ge_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:107:87
    |
107 | pub fn emit_i32_ge_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:116:22
    |
116 | pub fn emit_i32_le_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:116:87
    |
116 | pub fn emit_i32_le_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:125:22
    |
125 | pub fn emit_i32_le_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:125:87
    |
125 | pub fn emit_i32_le_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:135:22
    |
135 | pub fn emit_i64_ge_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:135:87
    |
135 | pub fn emit_i64_ge_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:143:22
    |
143 | pub fn emit_i64_le_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:143:87
    |
143 | pub fn emit_i64_le_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:151:22
    |
151 | pub fn emit_i64_le_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:151:87
    |
151 | pub fn emit_i64_le_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:160:22
    |
160 | pub fn emit_i64_ge_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:160:87
    |
160 | pub fn emit_i64_ge_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:168:20
    |
168 | pub fn emit_f64_lt(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:168:85
    |
168 | pub fn emit_f64_lt(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/relops.rs:176:20
    |
176 | pub fn emit_f64_le(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/relops.rs:176:85
    |
176 | pub fn emit_f64_le(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/wasi_helpers.rs:44:30
   |
44 | pub fn emit_fd_write_helpers(writer: &opencl_writer::OpenCLCWriter, _debug: bool) -> String {
   |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `writer`
   --> src/opencl_writer/wasi_helpers.rs:227:36
    |
227 | pub fn emit_environ_sizes_get_post(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, _debug: bool) -> String {
    |                                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `writer`
   --> src/opencl_writer/wasi_helpers.rs:257:30
    |
257 | pub fn emit_environ_get_post(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, _debug: bool) -> String {
    |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `iovec_count`
   --> src/opencl_writer/wasi_helpers.rs:295:9
    |
295 |     let iovec_count = stack_ctx.vstack_pop(StackType::i32);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_iovec_count`

warning: unused variable: `iovec_ptr`
   --> src/opencl_writer/wasi_helpers.rs:296:9
    |
296 |     let iovec_ptr = stack_ctx.vstack_pop(StackType::i32);
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_iovec_ptr`

warning: unused variable: `fd`
   --> src/opencl_writer/wasi_helpers.rs:297:9
    |
297 |     let fd = stack_ctx.vstack_pop(StackType::i32);
    |         ^^ help: if this is intentional, prefix it with an underscore: `_fd`

warning: unused variable: `writer`
   --> src/opencl_writer/wasi_helpers.rs:292:27
    |
292 | pub fn emit_fd_write_post(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, _debug: bool) -> String {
    |                           ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `json_buf_len`
   --> src/opencl_writer/wasi_helpers.rs:321:9
    |
321 |     let json_buf_len = stack_ctx.vstack_pop(StackType::i32);
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_json_buf_len`

warning: unused variable: `writer`
   --> src/opencl_writer/wasi_helpers.rs:318:36
    |
318 | pub fn emit_serverless_invoke_post(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, _debug: bool) -> String {
    |                                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `writer`
   --> src/opencl_writer/wasi_helpers.rs:340:37
    |
340 | pub fn emit_serverless_response_pre(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/wasi_helpers.rs:340:102
    |
340 | pub fn emit_serverless_response_pre(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/wasi_helpers.rs:359:38
    |
359 | pub fn emit_serverless_response_post(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/wasi_helpers.rs:359:103
    |
359 | pub fn emit_serverless_response_post(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/wasi_helpers.rs:368:28
    |
368 | pub fn emit_random_get_pre(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/wasi_helpers.rs:368:93
    |
368 | pub fn emit_random_get_pre(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/wasi_helpers.rs:380:29
    |
380 | pub fn emit_random_get_post(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/wasi_helpers.rs:380:94
    |
380 | pub fn emit_random_get_post(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
    |                                                                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/globals.rs:11:24
   |
11 | pub fn emit_global_get(writer: &opencl_writer::OpenCLCWriter,
   |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/globals.rs:16:24
   |
16 |                        debug: bool) -> String {
   |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/globals.rs:45:24
   |
45 | pub fn emit_global_set(writer: &opencl_writer::OpenCLCWriter,
   |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/globals.rs:50:24
   |
50 |                        debug: bool) -> String {
   |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/memargs.rs:13:28
   |
13 | pub fn emit_memload_i32_8u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/memargs.rs:13:108
   |
13 | pub fn emit_memload_i32_8u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                                                                                                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/memargs.rs:26:29
   |
26 | pub fn emit_memload_i32_16u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/memargs.rs:26:109
   |
26 | pub fn emit_memload_i32_16u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                                                                                                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/memargs.rs:39:29
   |
39 | pub fn emit_memload_i32_16s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/memargs.rs:39:109
   |
39 | pub fn emit_memload_i32_16s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                                                                                                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/memargs.rs:52:28
   |
52 | pub fn emit_memload_i32_8s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/memargs.rs:52:108
   |
52 | pub fn emit_memload_i32_8s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                                                                                                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/memargs.rs:66:25
   |
66 | pub fn emit_memload_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/memargs.rs:66:105
   |
66 | pub fn emit_memload_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                                                                                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/memargs.rs:79:25
   |
79 | pub fn emit_memload_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/memargs.rs:79:105
   |
79 | pub fn emit_memload_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                                                                                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/memargs.rs:92:25
   |
92 | pub fn emit_memload_f64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/memargs.rs:92:105
   |
92 | pub fn emit_memload_f64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
   |                                                                                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:107:28
    |
107 | pub fn emit_memload_i64_8u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:107:108
    |
107 | pub fn emit_memload_i64_8u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:120:29
    |
120 | pub fn emit_memload_i64_32u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:120:109
    |
120 | pub fn emit_memload_i64_32u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:133:29
    |
133 | pub fn emit_memload_i64_16u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:133:109
    |
133 | pub fn emit_memload_i64_16u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:148:26
    |
148 | pub fn emit_memstore_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:148:106
    |
148 | pub fn emit_memstore_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:163:27
    |
163 | pub fn emit_memstore8_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                           ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:163:107
    |
163 | pub fn emit_memstore8_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:177:27
    |
177 | pub fn emit_memstore8_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                           ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:177:107
    |
177 | pub fn emit_memstore8_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:191:28
    |
191 | pub fn emit_memstore16_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:191:108
    |
191 | pub fn emit_memstore16_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:205:28
    |
205 | pub fn emit_memstore16_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:205:108
    |
205 | pub fn emit_memstore16_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:219:26
    |
219 | pub fn emit_memstore_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:219:106
    |
219 | pub fn emit_memstore_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:233:26
    |
233 | pub fn emit_memstore_f64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:233:106
    |
233 | pub fn emit_memstore_f64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:251:28
    |
251 | pub fn emit_memstore32_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:251:108
    |
251 | pub fn emit_memstore32_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, args: &MemArg, debug: bool) -> String {
    |                                                                                                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:269:22
    |
269 | pub fn emit_mem_grow(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, arg: &MemoryArg, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `arg`
   --> src/opencl_writer/memargs.rs:269:87
    |
269 | pub fn emit_mem_grow(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, arg: &MemoryArg, debug: bool) -> String {
    |                                                                                       ^^^ help: if this is intentional, prefix it with an underscore: `_arg`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:269:104
    |
269 | pub fn emit_mem_grow(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, arg: &MemoryArg, debug: bool) -> String {
    |                                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
   --> src/opencl_writer/memargs.rs:298:22
    |
298 | pub fn emit_mem_size(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, arg: &MemoryArg, debug: bool) -> String {
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `arg`
   --> src/opencl_writer/memargs.rs:298:87
    |
298 | pub fn emit_mem_size(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, arg: &MemoryArg, debug: bool) -> String {
    |                                                                                       ^^^ help: if this is intentional, prefix it with an underscore: `_arg`

warning: unused variable: `debug`
   --> src/opencl_writer/memargs.rs:298:104
    |
298 | pub fn emit_mem_size(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, arg: &MemoryArg, debug: bool) -> String {
    |                                                                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/testops.rs:13:21
   |
13 | pub fn emit_i32_eqz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/testops.rs:13:86
   |
13 | pub fn emit_i32_eqz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/testops.rs:18:21
   |
18 | pub fn emit_i64_eqz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/testops.rs:18:86
   |
18 | pub fn emit_i64_eqz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:14:26
   |
14 | pub fn emit_i32_wrap_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:14:91
   |
14 | pub fn emit_i32_wrap_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:20:30
   |
20 | pub fn emit_i64_extend_i32_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:20:95
   |
20 | pub fn emit_i64_extend_i32_s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:26:30
   |
26 | pub fn emit_i64_extend_i32_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:26:95
   |
26 | pub fn emit_i64_extend_i32_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:32:29
   |
32 | pub fn emit_f64_convert_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:32:94
   |
32 | pub fn emit_f64_convert_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:38:30
   |
38 | pub fn emit_f64_convert_i32u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:38:95
   |
38 | pub fn emit_f64_convert_i32u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:44:30
   |
44 | pub fn emit_f64_convert_i64u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:44:95
   |
44 | pub fn emit_f64_convert_i64u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:50:30
   |
50 | pub fn emit_f64_convert_i64s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:50:95
   |
50 | pub fn emit_f64_convert_i64s(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:56:29
   |
56 | pub fn emit_i32_trunc_f64_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:56:94
   |
56 | pub fn emit_i32_trunc_f64_u(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:62:33
   |
62 | pub fn emit_i64_reinterpret_f64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:62:98
   |
62 | pub fn emit_i64_reinterpret_f64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:69:33
   |
69 | pub fn emit_f64_reinterpret_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:69:98
   |
69 | pub fn emit_f64_reinterpret_i64(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:76:33
   |
76 | pub fn emit_f32_reinterpret_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:76:98
   |
76 | pub fn emit_f32_reinterpret_i32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/convops.rs:83:33
   |
83 | pub fn emit_i32_reinterpret_f32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/convops.rs:83:98
   |
83 | pub fn emit_i32_reinterpret_f32(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
 --> src/opencl_writer/parametric.rs:9:20
  |
9 | pub fn emit_select(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, stack_sizes: &mut Vec<u32>, fn_name: &str, debug: boo...
  |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
 --> src/opencl_writer/parametric.rs:9:128
  |
9 | ...&mut Vec<u32>, fn_name: &str, debug: bool) -> String {
  |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/unops.rs:10:21
   |
10 | pub fn emit_i32_clz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/unops.rs:10:86
   |
10 | pub fn emit_i32_clz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/unops.rs:16:21
   |
16 | pub fn emit_i64_clz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/unops.rs:16:86
   |
16 | pub fn emit_i64_clz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/unops.rs:22:21
   |
22 | pub fn emit_i32_ctz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/unops.rs:22:86
   |
22 | pub fn emit_i32_ctz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/unops.rs:28:21
   |
28 | pub fn emit_i64_ctz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/unops.rs:28:86
   |
28 | pub fn emit_i64_ctz(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/unops.rs:34:24
   |
34 | pub fn emit_i32_popcnt(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/unops.rs:34:89
   |
34 | pub fn emit_i32_popcnt(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `writer`
  --> src/opencl_writer/unops.rs:40:21
   |
40 | pub fn emit_f64_neg(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_writer`

warning: unused variable: `debug`
  --> src/opencl_writer/unops.rs:40:86
   |
40 | pub fn emit_f64_neg(writer: &opencl_writer::OpenCLCWriter, stack_ctx: &mut StackCtx, debug: bool) -> String {
   |                                                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_debug`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:142:45
    |
142 |                 wast::Instruction::I32Store(memarg) => {
    |                                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:147:46
    |
147 |                 wast::Instruction::I32Store8(memarg) => {
    |                                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:152:46
    |
152 |                 wast::Instruction::I64Store8(memarg) => {
    |                                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:158:47
    |
158 |                 wast::Instruction::I64Store16(memarg) => {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:164:47
    |
164 |                 wast::Instruction::I32Store16(memarg) => {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:169:47
    |
169 |                 wast::Instruction::I64Store32(memarg) => {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:175:44
    |
175 |                 wast::Instruction::I32Load(memarg) => {
    |                                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:180:46
    |
180 |                 wast::Instruction::I32Load8u(memarg) => {
    |                                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:185:47
    |
185 |                 wast::Instruction::I64Load16u(memarg) => {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:191:47
    |
191 |                 wast::Instruction::I32Load16u(memarg) => {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:196:47
    |
196 |                 wast::Instruction::I32Load16s(memarg) => {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:201:46
    |
201 |                 wast::Instruction::I32Load8s(memarg) => {
    |                                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:206:46
    |
206 |                 wast::Instruction::I64Load8u(memarg) => {
    |                                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:213:47
    |
213 |                 wast::Instruction::I64Load32u(memarg) => {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:219:44
    |
219 |                 wast::Instruction::I64Load(memarg) => {
    |                                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:225:44
    |
225 |                 wast::Instruction::F64Load(memarg) => {
    |                                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:231:45
    |
231 |                 wast::Instruction::I64Store(memarg) => {
    |                                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `memarg`
   --> src/opencl_writer/vstack.rs:237:45
    |
237 |                 wast::Instruction::F64Store(memarg) => {
    |                                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_memarg`

warning: unused variable: `idx`
   --> src/opencl_writer/vstack.rs:247:46
    |
247 |                 wast::Instruction::GlobalGet(idx) => {
    |                                              ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `idx`
   --> src/opencl_writer/vstack.rs:251:46
    |
251 |                 wast::Instruction::GlobalSet(idx) => {
    |                                              ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `val`
   --> src/opencl_writer/vstack.rs:255:45
    |
255 |                 wast::Instruction::I32Const(val) => {
    |                                             ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `val`
   --> src/opencl_writer/vstack.rs:259:45
    |
259 |                 wast::Instruction::I64Const(val) => {
    |                                             ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `val`
   --> src/opencl_writer/vstack.rs:263:45
    |
263 |                 wast::Instruction::F32Const(val) => {
    |                                             ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `val`
   --> src/opencl_writer/vstack.rs:267:45
    |
267 |                 wast::Instruction::F64Const(val) => {
    |                                             ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `inline`
   --> src/opencl_writer/vstack.rs:817:34
    |
817 |                         (_, Some(inline)) => panic!("Inline types for call_indirect not implemented yet (vstack)"),
    |                                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_inline`

warning: unused variable: `b`
    --> src/opencl_writer/vstack.rs:1047:42
     |
1047 |                 wast::Instruction::Block(b) => {
     |                                          ^ help: if this is intentional, prefix it with an underscore: `_b`

warning: unused variable: `b`
    --> src/opencl_writer/vstack.rs:1050:41
     |
1050 |                 wast::Instruction::Loop(b) => {
     |                                         ^ help: if this is intentional, prefix it with an underscore: `_b`

warning: unused variable: `id`
    --> src/opencl_writer/vstack.rs:1053:40
     |
1053 |                 wast::Instruction::End(id) => {
     |                                        ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `arg`
    --> src/opencl_writer/vstack.rs:1084:47
     |
1084 |                 wast::Instruction::MemoryGrow(arg) => {
     |                                               ^^^ help: if this is intentional, prefix it with an underscore: `_arg`

warning: unused variable: `arg`
    --> src/opencl_writer/vstack.rs:1089:47
     |
1089 |                 wast::Instruction::MemorySize(arg) => {
     |                                               ^^^ help: if this is intentional, prefix it with an underscore: `_arg`

warning: unused variable: `idx`
    --> src/opencl_writer/vstack.rs:1096:39
     |
1096 |                 wast::Instruction::Br(idx) => {
     |                                       ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `idx`
    --> src/opencl_writer/vstack.rs:1099:41
     |
1099 |                 wast::Instruction::BrIf(idx) => {
     |                                         ^^^ help: if this is intentional, prefix it with an underscore: `_idx`

warning: unused variable: `table_idxs`
    --> src/opencl_writer/vstack.rs:1103:44
     |
1103 |                 wast::Instruction::BrTable(table_idxs) => {
     |                                            ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_table_idxs`

warning: unused variable: `max_offset`
    --> src/opencl_writer/vstack.rs:1138:13
     |
1138 |         let mut max_offset: u32 = 0;
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_offset`

warning: unused variable: `max_offset_type_size`
    --> src/opencl_writer/vstack.rs:1139:13
     |
1139 |         let mut max_offset_type_size = 0;
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_offset_type_size`

warning: unused variable: `local`
    --> src/opencl_writer/vstack.rs:1244:14
     |
1244 |         for (local, offset) in self.local_offsets.iter() {
     |              ^^^^^ help: if this is intentional, prefix it with an underscore: `_local`

warning: unused variable: `locals`
  --> src/opencl_writer/fastcalls.rs:58:33
   |
58 |         (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
   |                                 ^^^^^^ help: try ignoring the field: `locals: _`

warning: unused variable: `typeuse`
  --> src/opencl_writer/fastcalls.rs:58:64
   |
58 |         (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
   |                                                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_typeuse`

warning: value assigned to `ambiguous_fastcalls` is never read
   --> src/opencl_writer/fastcalls.rs:133:9
    |
133 |     let mut ambiguous_fastcalls = vec![];
    |         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `total_instr_count` is never read
  --> src/opencl_writer/compile_stats.rs:18:9
   |
18 |     let mut total_instr_count: u32 = 0;
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `locals`
  --> src/opencl_writer/compile_stats.rs:31:33
   |
31 |         (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
   |                                 ^^^^^^ help: try ignoring the field: `locals: _`

warning: unused variable: `id`
  --> src/opencl_writer/compile_stats.rs:31:59
   |
31 |         (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
   |                                                           ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `typeuse`
  --> src/opencl_writer/compile_stats.rs:31:64
   |
31 |         (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
   |                                                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_typeuse`

warning: unused variable: `nested_total_fastcall_count`
  --> src/opencl_writer/compile_stats.rs:46:85
   |
46 | ..._count, nested_total_fastcall_count, nested_total_indirect_count, nested_total_block_count, nested_total_loop_count) = function_stats(...
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nested_total_fastcall_count`

warning: unused variable: `locals`
  --> src/opencl_writer/cfg_optimizer.rs:26:33
   |
26 |         (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
   |                                 ^^^^^^ help: try ignoring the field: `locals: _`

warning: unused variable: `id`
  --> src/opencl_writer/cfg_optimizer.rs:26:59
   |
26 |         (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
   |                                                           ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `typeuse`
  --> src/opencl_writer/cfg_optimizer.rs:26:64
   |
26 |         (wast::FuncKind::Inline{locals, expression}, Some(id), typeuse) => {
   |                                                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_typeuse`

warning: unused variable: `input_filename`
   --> src/opencl_runner.rs:175:16
    |
175 |                input_filename: &str,
    |                ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_filename`

warning: unused variable: `compile_flags`
   --> src/opencl_runner.rs:187:16
    |
187 |                compile_flags: String,
    |                ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compile_flags`

warning: unused variable: `link_flags`
   --> src/opencl_runner.rs:188:16
    |
188 |                link_flags: String,
    |                ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_link_flags`

warning: unused variable: `num_compiled_funcs`
   --> src/opencl_runner.rs:250:27
    |
250 |                           num_compiled_funcs: u32,
    |                           ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_num_compiled_funcs`

warning: unused variable: `build_result`
   --> src/opencl_runner.rs:594:33
    |
594 | ...   let build_result = ocl::core::compile_program(&program_to_build, Some(&[device_id]), options, &[&fastcall_header], &[CString::new("...
    |           ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_build_result`

warning: unused variable: `num_vms`
   --> src/opencl_runner.rs:563:21
    |
563 |                 let num_vms = self.num_vms.clone();
    |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_num_vms`

warning: unused variable: `cflags`
   --> src/opencl_runner.rs:571:25
    |
571 |                     let cflags = compile_flags.clone();
    |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_cflags`

warning: unused variable: `result`
  --> src/opencl_runner/random.rs:39:13
   |
39 |         let result = ctx.random_get(buf, random_len).unwrap();
   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: unused variable: `hcall_buf_size`
  --> src/batch_submit.rs:43:25
   |
43 |     pub fn start_server(hcall_buf_size: usize, sender: Sender<(Vec<u8>, usize)>, receiver: Receiver<(Vec<u8>, usize, u64, u64, u64, u64)>...
   |                         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hcall_buf_size`

warning: unused variable: `num_vms`
  --> src/batch_submit.rs:43:140
   |
43 | ...size, u64, u64, u64, u64)>, num_vms: u32, server_ip: String, server_port: String) -> JoinHandle<()> {
   |                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_num_vms`

warning: variable does not need to be mutable
   --> src/opencl_writer/wasi_helpers.rs:313:9
    |
313 |     let mut ret_str = String::from("");
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/opencl_writer/wasi_helpers.rs:360:9
    |
360 |     let mut ret_str = String::from("");
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/opencl_writer/vstack.rs:1138:13
     |
1138 |         let mut max_offset: u32 = 0;
     |             ----^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/opencl_writer/vstack.rs:1139:13
     |
1139 |         let mut max_offset_type_size = 0;
     |             ----^^^^^^^^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/opencl_runner.rs:926:13
    |
926 |         let mut called_funcs = HashSet::new();
    |             ----^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/opencl_runner/random.rs:26:13
   |
26 |         let mut hcall_buf: &mut [u8] = &mut hypercall.hypercall_buffer.lock().unwrap();
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: field is never read: `engine`
   --> src/opencl_runner/vectorized_vm.rs:133:5
    |
133 |     engine: Engine,
    |     ^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field is never read: `store`
   --> src/opencl_runner/vectorized_vm.rs:134:5
    |
134 |     store: Store,
    |     ^^^^^^^^^^^^

warning: variant is never constructed: `StatusUnknownError`
  --> src/opencl_runner.rs:55:5
   |
55 |     StatusUnknownError,
   |     ^^^^^^^^^^^^^^^^^^

warning: 426 warnings emitted

    Finished release [optimized] target(s) in 0.28s
     Running `/Users/sam/research/wasm2opencl/target/release/wasm2opencl -i average.wasm --wasmtime=false --serverless=true --hcallsize=1048576 --vmcount=64 --isgpu=false --partition=true -h 3145728`
[src/main.rs:243] matches.clone() = ArgMatches {
    args: {
        "vmcount": MatchedArg {
            occurs: 1,
            indices: [
                10,
            ],
            vals: [
                "64",
            ],
        },
        "heap": MatchedArg {
            occurs: 1,
            indices: [
                16,
            ],
            vals: [
                "3145728",
            ],
        },
        "serverless": MatchedArg {
            occurs: 1,
            indices: [
                6,
            ],
            vals: [
                "true",
            ],
        },
        "vmgroups": MatchedArg {
            occurs: 0,
            indices: [
                18,
            ],
            vals: [
                "1",
            ],
        },
        "entry": MatchedArg {
            occurs: 0,
            indices: [
                25,
            ],
            vals: [
                "",
            ],
        },
        "isgpu": MatchedArg {
            occurs: 1,
            indices: [
                12,
            ],
            vals: [
                "false",
            ],
        },
        "ip": MatchedArg {
            occurs: 0,
            indices: [
                30,
            ],
            vals: [
                "localhost",
            ],
        },
        "partition": MatchedArg {
            occurs: 1,
            indices: [
                14,
            ],
            vals: [
                "true",
            ],
        },
        "wasmtime": MatchedArg {
            occurs: 1,
            indices: [
                4,
            ],
            vals: [
                "false",
            ],
        },
        "debugcallprint": MatchedArg {
            occurs: 0,
            indices: [
                21,
            ],
            vals: [
                "false",
            ],
        },
        "compile": MatchedArg {
            occurs: 0,
            indices: [
                28,
            ],
            vals: [
                "false",
            ],
        },
        "forceinline": MatchedArg {
            occurs: 0,
            indices: [
                29,
            ],
            vals: [
                "false",
            ],
        },
        "printreturn": MatchedArg {
            occurs: 0,
            indices: [
                23,
            ],
            vals: [
                "false",
            ],
        },
        "globals-buffer-size": MatchedArg {
            occurs: 0,
            indices: [
                27,
            ],
            vals: [
                "",
            ],
        },
        "ldflags": MatchedArg {
            occurs: 0,
            indices: [
                24,
            ],
            vals: [
                "",
            ],
        },
        "port": MatchedArg {
            occurs: 0,
            indices: [
                31,
            ],
            vals: [
                "8000",
            ],
        },
        "callstack": MatchedArg {
            occurs: 0,
            indices: [
                20,
            ],
            vals: [
                "1024",
            ],
        },
        "input": MatchedArg {
            occurs: 1,
            indices: [
                2,
            ],
            vals: [
                "average.wasm",
            ],
        },
        "cflags": MatchedArg {
            occurs: 0,
            indices: [
                22,
            ],
            vals: [
                "",
            ],
        },
        "hcallsize": MatchedArg {
            occurs: 1,
            indices: [
                8,
            ],
            vals: [
                "1048576",
            ],
        },
        "isinterleaved": MatchedArg {
            occurs: 0,
            indices: [
                19,
            ],
            vals: [
                "true",
            ],
        },
        "stack": MatchedArg {
            occurs: 0,
            indices: [
                17,
            ],
            vals: [
                "1048576",
            ],
        },
        "numfuncs": MatchedArg {
            occurs: 0,
            indices: [
                26,
            ],
            vals: [
                "",
            ],
        },
    },
    subcommand: None,
    usage: Some(
        "USAGE:\n    wasm2opencl [OPTIONS] --input <>",
    ),
}
[src/main.rs:268] compile_args.clone() = ""
[src/opencl_writer.rs:1714] program_start_mem_pages = 17
[src/opencl_writer.rs:1715] program_start_max_pages = 48
[src/opencl_writer.rs:1988] &_fast_function_set = {
    "dummy_1",
    "_ZN59_$LT$std..process..ChildStdin$u20$as$u20$std..io..Write$GT$5flush17h79dc61b27055a9f7E",
    "__lshrti3",
    "_ZN5alloc11collections5btree8navigate25next_kv_unchecked_dealloc17h0d8b629a227ba839E",
    "_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc60f63cda20ff0bcE",
    "_ZN3std3sys4wasi17decode_error_kind17hf7df28fba2cac61eE",
    "_ZN4core3fmt9Formatter15debug_upper_hex17h4ed5a5602d7eb453E",
    "_ZN4core5panic9PanicInfo7message17h596009f7a73a56c8E",
    "aligned_alloc",
    "strerror",
    "_ZN4core5panic8Location6caller17hbf495a1c8bd3310dE",
    "_ZN3std7process5abort17hd4f877547ffc3364E",
    "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h1e726df7d44c575aE",
    "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hbf183aa937714250E",
    "_ZN4core3ptr13drop_in_place17h0004e302d1c67d0eE",
    "_ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$3get17haaf1b3636a41153dE",
    "_ZN79_$LT$serde_json..value..de..SeqDeserializer$u20$as$u20$serde..de..SeqAccess$GT$9size_hint17h215e838afabd2f78E",
    "__rust_alloc_zeroed",
    "_ZN4core3ptr13drop_in_place17h7d1e94c6af9a81cbE.llvm.17576869749007264814",
    "_ZN4core3ptr13drop_in_place17h286ac80c35ac4400E.llvm.2600633496408617334",
    "_ZN4core3ptr13drop_in_place17ha310a246575d80e8E",
    "_ZN55_$LT$str$u20$as$u20$serde_json..value..index..Index$GT$10index_into17hec2f9ccca1f085daE",
    "_ZN3std3sys4wasi14abort_internal17h20dd09cea3089554E",
    "_ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$3get17hb89b7aa16723efbaE",
    "__rdl_alloc_zeroed",
    "dlfree",
    "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hf7e256a7acecf50fE",
    "free",
    "_ZN4core5panic8Location4file17h51bcfda52921e74dE",
    "_ZN4core3ops8function6FnOnce9call_once17h08ab5a17f5b9e79bE",
    "abort",
    "_ZN4core3ptr13drop_in_place17h4b668c8b44900f6fE.llvm.15008056854182867539",
    "_ZN4core5panic9PanicInfo8location17h421341169dd33d0aE",
    "_ZN10serde_json5value2de15SeqDeserializer3new17h65c31d8e54687d5aE",
    "_ZN4core3ptr13drop_in_place17h1508c1205ff902bbE",
    "_ZN4core3ptr13drop_in_place17he8ed907dbac62b69E",
    "dlmalloc",
    "_ZN4core3ptr13drop_in_place17h88886004703ec808E.llvm.5760601896950577691",
    "memset",
    "__multi3",
    "internal_memalign",
    "malloc",
    "sbrk",
    "calloc",
    "__rdl_realloc",
    "_ZN4core3fmt9Formatter15debug_lower_hex17hdb55d5b2cd737923E",
    "_ZN10serde_json6number6Number10unexpected17h058d566bbade0395E",
    "_ZN3std3sys4wasi7process8ExitCode6as_i3217ha4ceffd7426c225dE",
    "_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17had27b7e83f85af5fE",
    "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hb7f26642070768f1E",
    "memcmp",
    "_ZN4core3ptr13drop_in_place17h86299b6b641ad8a7E",
    "_ZN4core3ptr13drop_in_place17h43f718f834090c67E",
    "__rust_start_panic",
    "_ZN3ryu6pretty8format6417h6ade3c82cd786a35E",
    "__rdl_alloc",
    "memmove",
    "_ZN5alloc6string104_$LT$impl$u20$core..convert..From$LT$alloc..string..String$GT$$u20$for$u20$alloc..vec..Vec$LT$u8$GT$$GT$4from17h426fcfd48e33b3f0E",
    "_ZN4core3ptr13drop_in_place17h00e6f7cf1e823730E",
    "_ZN68_$LT$serde_json..read..StrRead$u20$as$u20$serde_json..read..Read$GT$13peek_position17h84045597efb6f37bE",
    "dispose_chunk",
    "_ZN4core3ptr13drop_in_place17h7709c01d3e7a6060E.llvm.18196528527515301292",
    "__rust_dealloc",
    "_ZN3std5error5Error7type_id17hb2616b0234930cbaE",
    "__rust_realloc",
    "_ZN4core3ptr13drop_in_place17hf49b0681bb037e3aE.llvm.9244666002171645713",
    "_ZN4wasi5error5Error9raw_error17h2e5cb1200f7ee65eE",
    "_ZN3std5error5Error5cause17hecb71446800c3e71E",
    "_ZN3std9panicking11panic_count17is_zero_slow_path17h67215868696f4ee3E",
    "_ZN3ryu6pretty8mantissa19write_mantissa_long17h6fe22da5b9386029E",
    "__rdl_dealloc",
    "realloc",
    "__wasm_call_dtors",
    "strerror_r",
    "_ZN4core3f6421_$LT$impl$u20$f64$GT$8classify17h589554e7cc89e0feE",
    "_ZN10serde_json4read7StrRead3new17h387a6684d16fc3f7E",
    "_ZN64_$LT$std..sys..wasi..stdio..Stderr$u20$as$u20$std..io..Write$GT$17is_write_vectored17h9a9a44e981442e4cE",
    "memcpy",
    "dummy",
    "_ZN4core3str5lossy9Utf8Lossy10from_bytes17h29ed77f000cbca3eE",
    "__rust_alloc",
    "_ZN4core3num60_$LT$impl$u20$core..str..traits..FromStr$u20$for$u20$u32$GT$8from_str17hd99c40ffee677c4aE",
    "__strchrnul",
    "_ZN93_$LT$std..panicking..begin_panic_handler..StrPanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$3get17h2ca03c926b5c28e2E",
    "strlen",
    "_ZN4core3str5lossy9Utf8Lossy6chunks17h2a5e9583e5751e83E",
    "_ZN4core3str8converts9from_utf817h38fa95334bc115caE",
    "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h26527d1fc5a43455E",
    "_ZN10serde_json5value2de42_$LT$impl$u20$serde_json..value..Value$GT$10unexpected17h09c32f7c2b8085a1E",
    "_ZN4core3ptr13drop_in_place17hb601c8862632e9d0E.llvm.6739483727811736919",
    "_ZN4core3ptr13drop_in_place17hf4d77907b546ae6fE",
    "_ZN4core3ptr13drop_in_place17h3fa943c3f067fe68E",
    "_ZN5alloc11collections5btree8navigate25next_kv_unchecked_dealloc17h526497e1d51a09deE",
    "strncmp",
    "__lctrans",
    "_ZN5alloc11collections5btree6search11search_tree17h32a718e87c44453fE",
    "_ZN5alloc11collections5btree4node10splitpoint17h7abae320261f89b8E",
    "_ZN243_$LT$std..error..$LT$impl$u20$core..convert..From$LT$alloc..string..String$GT$$u20$for$u20$alloc..boxed..Box$LT$dyn$u20$std..error..Error$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$..from..StringError$u20$as$u20$std..error..Error$GT$11description17h2cf077101067a5dcE",
    "_ZN3ryu3d2s3d2d17h6fca4883f01edddbE",
    "_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17h2161e0342b78f830E",
    "_ZN3std5error5Error9backtrace17h1af4011e70f5fa7bE",
    "_ZN4core3ptr13drop_in_place17ha5e37b7b0fc69590E",
}
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 305421
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 507
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 57566
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 39410
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 185
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 150715
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 1808
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 53
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 1099
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 71
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 57
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 9
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 56510
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 13780
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 1407
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 558
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 106421
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 380
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 33866
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 213542
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 65991
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 11
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 16989
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 187
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 2042
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 218
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 13806
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 38
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 1176
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 7354
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 116
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 3958
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 279
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 303
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 18
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 41098
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 47161
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 152
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 88
[src/opencl_writer/cfg_optimizer.rs:181] &current_instruction_count = 7
[src/opencl_writer/cfg_optimizer.rs:199] &partitions.len() = 209
[src/opencl_writer.rs:2060] &partitions = [
    (
        0,
        {
            "_ZN4core5slice6memchr19memchr_general_case17h7354034fa87aa8afE",
            "__wasilibc_ensure_environ",
            "_ZN5alloc5alloc18handle_alloc_error17hf7ce81ca94e702b4E",
            "rust_panic",
            "_ZN4core6option18expect_none_failed17h1577528e2150c148E",
            "_ZN4core6option15Option$LT$T$GT$6unwrap17h7c6fcd1383a65afaE",
            "rust_begin_unwind",
            "_ZN4core5slice5index26slice_start_index_len_fail17hc0d53e3266a17fcdE",
            "_ZN3std10sys_common4util10dumb_print17h1494ce83bd9da48eE",
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hcd5a376e144b5af7E",
            "_ZN4core9panicking5panic17h97b5c3a1a3625519E",
            "_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17h8abdde418886e77eE",
            "getenv",
            "_ZN3std9panicking20rust_panic_with_hook17h072472ae3822b936E",
            "_ZN3std10sys_common4util5abort17h3a3e3e38d49f0af0E",
            "_ZN3std3ffi5c_str104_$LT$impl$u20$core..convert..From$LT$std..ffi..c_str..NulError$GT$$u20$for$u20$std..io..error..Error$GT$4from17h53a08022ecac46ecE",
            "_ZN5alloc7raw_vec17capacity_overflow17h4a59382fcfdac2a7E",
            "_ZN4core6option15Option$LT$T$GT$6unwrap17hd4f78e9efa272555E",
            "__rg_oom",
            "_Exit",
            "_ZN3std9panicking15begin_panic_fmt17ha973365f16566a78E",
            "_ZN4core3fmt5write17hd1badd30785103ebE",
            "_ZN3std9panicking11begin_panic28_$u7b$$u7b$closure$u7d$$u7d$17hc6a7d74ab4b78552E",
            "_ZN3std3ffi5c_str7CString18from_vec_unchecked17h9b6d1062f436d9e7E",
            "_ZN3std10sys_common11thread_info10ThreadInfo4with28_$u7b$$u7b$closure$u7d$$u7d$17h722282398b052416E",
            "__wasilibc_initialize_environ",
            "rust_oom",
            "_ZN4core5slice5index24slice_end_index_len_fail17h7a06b5809a767d30E",
            "_ZN115_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hd8fd58f77d2b91e0E",
            "_ZN3std9panicking12default_hook28_$u7b$$u7b$closure$u7d$$u7d$17h13a5019ee57e5a2fE",
            "_ZN3std2io5Write9write_fmt17h19d474fddf7f3bd9E",
            "_ZN3std9panicking19begin_panic_handler28_$u7b$$u7b$closure$u7d$$u7d$17h9cf3525ad5c951acE",
            "_ZN3std3env7_var_os17h7b5bd34fa4f0a7aeE",
            "_ZN4core9panicking18panic_bounds_check17h38a7b5c3d6a19f8aE",
            "_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17hd5c0ee56cf106280E",
            "_ZN4core9panicking9panic_fmt17hcdbc22275273f460E",
            "_ZN3std9panicking12default_hook17h4a99e8db7d62770bE",
            "_ZN3std6thread6Thread3new17hce6ca4d3f6be767fE",
            "_ZN3std9panicking11begin_panic17h0ed70a98e2dc6a71E",
            "__rust_alloc_error_handler",
            "_ZN3std2io5stdio9set_panic17h6d6f415350b6886fE",
        },
    ),
    (
        1,
        {
            "_ZN4core3fmt9Formatter12pad_integral17h7fdaab4ab8c55926E",
            "_ZN4core3fmt9Formatter12pad_integral12write_prefix17h48b48027592fc9ccE",
            "_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17hd76605766e3486dbE",
        },
    ),
    (
        2,
        {
            "_ZN5alloc11collections5btree3map5entry24VacantEntry$LT$K$C$V$GT$6insert17ha1bbdbd70d45c9faE",
            "_ZN5alloc11collections5btree4node210Handle$LT$alloc..collections..btree..node..NodeRef$LT$alloc..collections..btree..node..marker..Mut$C$K$C$V$C$alloc..collections..btree..node..marker..Leaf$GT$$C$alloc..collections..btree..node..marker..Edge$GT$16insert_recursing17hf6be9364d245e164E",
        },
    ),
    (
        3,
        {
            "_ZN3std2io5Write9write_all17hb2f68713f3bf4e1cE",
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hc364b6246cd3a09bE",
            "_ZN4wasi13lib_generated8fd_write17h7d096138efdc1368E",
        },
    ),
    (
        4,
        {
            "_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h3185135c94601f99E",
            "_ZN4core3fmt3num3imp7fmt_u6417h5c0497533ea6902aE",
        },
    ),
    (
        5,
        {
            "_ZN92_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h3ff133f4cd917ad0E.llvm.13611741694240070123",
            "_ZN96_$LT$core..iter..adapters..Cloned$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h10e5ceff012da9bbE",
            "_ZN63_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h19a409c0772b5decE",
            "_ZN60_$LT$alloc..string..String$u20$as$u20$core..clone..Clone$GT$5clone17h20cbbd769597c1a2E",
            "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h0ad50049d654304eE",
        },
    ),
    (
        6,
        {
            "_ZN4core7unicode9printable12is_printable17h7a30a682a5e91d1fE",
            "_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h0e6c324acc185890E",
            "_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hc1316ed38e957e83E",
            "_ZN4core3str16slice_error_fail17hb0c6ff878333d3e0E",
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8c0568c37ff71727E",
            "_ZN4core5slice5index22slice_index_order_fail17hb366c6549f580d0fE",
        },
    ),
    (
        7,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hbf5ff209011e498bE",
            "_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hed995733f871919dE",
        },
    ),
    (
        8,
        {
            "_ZN4core3fmt9Formatter9write_fmt17hc2a7c5671d32a366E",
            "_ZN61_$LT$serde_json..error..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17hc7ceebd08d9a92d7E",
        },
    ),
    (
        9,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hdf96ab3326cebce0E",
            "_ZN60_$LT$core..panic..Location$u20$as$u20$core..fmt..Display$GT$3fmt17h48c3c8a4a82136c5E",
        },
    ),
    (
        10,
        {
            "_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17hc65b30f7ac01b22cE",
            "_ZN3std9panicking11begin_panic28_$u7b$$u7b$closure$u7d$$u7d$17h1c6506c7db0aac50E",
            "_ZN3std9panicking11begin_panic17h85e62028a7311c75E",
        },
    ),
    (
        11,
        {
            "_ZN3std10sys_common7condvar7Condvar4wait17h0cd41a0698665880E",
            "_ZN3std3sys4wasi7condvar7Condvar4wait17h5cb19223d7711004E",
        },
    ),
    (
        12,
        {
            "_ZN5serde3ser12SerializeMap15serialize_entry17he1ce54cb2d9ff54cE",
            "_ZN10serde_json5value3ser76_$LT$impl$u20$serde..ser..Serialize$u20$for$u20$serde_json..value..Value$GT$9serialize17hbb5660a9d34da6dfE.llvm.13112444295523517385",
            "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h801d47cae67d99e7E",
            "_ZN5serde3ser10Serializer11collect_seq17hc3b5995a0f58c017E",
            "_ZN5alloc11collections5btree8navigate10full_range17h8e433a0436f3f698E",
            "_ZN10serde_json3ser18format_escaped_str17h3dae0c210879aaa0E",
        },
    ),
    (
        13,
        {
            "_ZN10serde_json2de21Deserializer$LT$R$GT$18parse_long_integer17hc105f6ac49e9f82bE",
            "_ZN10serde_json5error5Error6syntax17h12e54484fa9f8314E",
            "_ZN10serde_json2de21Deserializer$LT$R$GT$5error17haccb35a1677770daE",
            "_ZN10serde_json2de21Deserializer$LT$R$GT$13parse_decimal17ha0d051baa72d483cE",
            "_ZN68_$LT$serde_json..read..StrRead$u20$as$u20$serde_json..read..Read$GT$8position17h2aa637c1819d7509E",
            "_ZN10serde_json2de21Deserializer$LT$R$GT$14parse_exponent17h9ea13dbc6fc9769fE",
            "_ZN10serde_json2de21Deserializer$LT$R$GT$10peek_error17h700c77c172d3b57cE.llvm.16428079068572711758",
            "_ZN10serde_json2de21Deserializer$LT$R$GT$23parse_exponent_overflow17hccad1576797bd288E",
            "_ZN10serde_json2de21Deserializer$LT$R$GT$22parse_decimal_overflow17hf2c6e8033e7cab16E",
        },
    ),
    (
        14,
        {
            "_ZN73_$LT$std..sys_common..os_str_bytes..Slice$u20$as$u20$core..fmt..Debug$GT$3fmt17hd1816c2358828231E",
            "_ZN55_$LT$std..path..Display$u20$as$u20$core..fmt..Debug$GT$3fmt17h302f5f4a4f14248bE",
            "_ZN4core3fmt9Formatter9write_str17hddf9f692eba0f0aeE",
            "_ZN96_$LT$core..str..lossy..Utf8LossyChunksIter$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h64ffe4e8c473c81dE",
            "_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$10write_char17h2523b8e81b9f9ca8E",
        },
    ),
    (
        15,
        {
            "_ZN4core3fmt9Formatter3pad17h02a4e5530173eae5E",
            "_ZN244_$LT$std..error..$LT$impl$u20$core..convert..From$LT$alloc..string..String$GT$$u20$for$u20$alloc..boxed..Box$LT$dyn$u20$std..error..Error$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$..from..StringError$u20$as$u20$core..fmt..Display$GT$3fmt17h2959524cede58e5fE",
            "_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h662a71d32ab266faE",
        },
    ),
    (
        16,
        {
            "_ZN10serde_json5value2de78_$LT$impl$u20$serde..de..Deserializer$u20$for$u20$serde_json..value..Value$GT$15deserialize_seq17h15c6ad99c557e9f9E",
            "_ZN7average12average_json17hb78e9f4bb825656eE",
            "_ZN4core3ptr13drop_in_place17h5114ffdc6f0b7e2fE.llvm.2908408750361513424",
            "_ZN4core3mem4drop17haf24ed797243c876E.llvm.13611741694240070123",
            "_ZN10serde_json5value2de11visit_array17hbd15c25a420d792fE",
            "_ZN167_$LT$serde..de..impls..$LT$impl$u20$serde..de..Deserialize$u20$for$u20$alloc..vec..Vec$LT$T$GT$$GT$..deserialize..VecVisitor$LT$T$GT$$u20$as$u20$serde..de..Visitor$GT$9visit_seq17h29e5bb39170f4b23E",
            "_ZN4core3str7pattern11StrSearcher3new17he8a9012642bba546E",
            "_ZN10serde_json5error10make_error17h631f59bc444d1180E",
            "_ZN10serde_json5value2de42_$LT$impl$u20$serde_json..value..Value$GT$12invalid_type17haeff19a5b5b7c021E.llvm.15008056854182867539",
            "_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h8463820c44f58d48E",
            "_ZN66_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h02d4448a1f711f5eE",
            "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h40ca78e8b4722ebeE",
            "_ZN61_$LT$serde_json..error..Error$u20$as$u20$serde..de..Error$GT$6custom17hdd81019c151727c2E.llvm.6739483727811736919",
            "_ZN10serde_json5value2de78_$LT$impl$u20$serde..de..Deserializer$u20$for$u20$serde_json..value..Value$GT$15deserialize_f6417hd3235b6d3802ed3aE",
            "_ZN5serde2de5Error14invalid_length17h5f4759f5df220243E",
            "_ZN61_$LT$serde_json..error..Error$u20$as$u20$serde..de..Error$GT$12invalid_type17he5d984e474df3ea3E",
            "_ZN61_$LT$serde_json..error..Error$u20$as$u20$serde..de..Error$GT$6custom17h2246305764b2808aE.llvm.17576869749007264814",
            "_ZN5alloc11collections5btree8navigate10full_range17h71a5883eff6345eaE",
        },
    ),
    (
        17,
        {
            "_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb40667e3de214d38E",
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h5f306fe61872bd24E",
        },
    ),
    (
        18,
        {
            "_ZN3std6thread4park17h5c709fc617d7b247E",
            "__wasilibc_populate_preopens",
            "_ZN3std4sync4once4Once10call_inner17h61048da0772cbe42E",
            "__wasilibc_initialize_environ_eagerly",
            "__wasm_call_ctors",
            "_start",
            "__original_main",
            "_ZN3std10sys_common13thread_parker7generic6Parker6unpark17h8791626c39eecee8E",
            "_ZN70_$LT$std..sync..once..WaiterQueue$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d93aff8d63f7356E",
            "_ZN3std2rt19lang_start_internal17ha925d42982681c99E",
        },
    ),
    (
        19,
        {
            "_ZN10serde_json5value2de77_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$11deserialize17hf6bfe88b1b5c2114E.llvm.16428079068572711758",
            "_ZN75_$LT$serde_json..de..MapAccess$LT$R$GT$$u20$as$u20$serde..de..MapAccess$GT$13next_key_seed17hbf35b0a4ad92c4caE",
            "_ZN75_$LT$serde_json..de..MapAccess$LT$R$GT$$u20$as$u20$serde..de..MapAccess$GT$15next_value_seed17h60d41cd21c360b13E",
            "_ZN83_$LT$serde_json..value..de..KeyClassifier$u20$as$u20$serde..de..DeserializeSeed$GT$11deserialize17hed166f83a897c597E",
            "_ZN66_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4de36cf77525f13bE",
            "_ZN75_$LT$serde_json..de..SeqAccess$LT$R$GT$$u20$as$u20$serde..de..SeqAccess$GT$17next_element_seed17h7fbdc6f0c5c5bb01E",
            "_ZN10serde_json4read12parse_escape17hd6dbbe5c3903d7fdE",
            "_ZN75_$LT$serde_json..de..MapAccess$LT$R$GT$$u20$as$u20$serde..de..MapAccess$GT$13next_key_seed17h1d64ed303a27f198E",
            "_ZN4core3ptr13drop_in_place17h1434623084598ac9E",
            "_ZN5serde2de5impls74_$LT$impl$u20$serde..de..Deserialize$u20$for$u20$alloc..string..String$GT$11deserialize17ha14e5c71c7bd253bE",
            "_ZN10serde_json2de21Deserializer$LT$R$GT$16parse_any_number17h6a3adf19945fc343E",
            "_ZN4core3ptr13drop_in_place17h07ecf6d0ff500e57E.llvm.9257461454808331057",
            "_ZN5alloc11collections5btree3map21BTreeMap$LT$K$C$V$GT$6insert17h3c123865c4ef25c3E",
            "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h57dda061b7c6d0f7E",
            "_ZN70_$LT$serde_json..read..SliceRead$u20$as$u20$serde_json..read..Read$GT$17decode_hex_escape17habf06e4972675be2E",
            "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hdc4b758d2e338db7E",
            "_ZN70_$LT$serde_json..read..SliceRead$u20$as$u20$serde_json..read..Read$GT$9parse_str17he6e79d0307bdb933E",
            "_ZN4core3mem4drop17h69ef866db66b08cbE.llvm.2883783829166601888",
            "_ZN10serde_json5error5Error12fix_position17he09ce69626a8753bE",
            "_ZN165_$LT$serde_json..value..de..$LT$impl$u20$serde..de..Deserialize$u20$for$u20$serde_json..value..Value$GT$..deserialize..ValueVisitor$u20$as$u20$serde..de..Visitor$GT$9visit_map17hcc2fbbdc78618aa3E",
        },
    ),
    (
        20,
        {
            "_ZN22wasm_serverless_invoke12wasm_handler11WasmHandler3run17hb3348faaead63b72E",
            "_ZN10serde_json5error5Error2io17hd7882f27f973bc1dE",
            "_ZN22wasm_serverless_invoke12wasm_handler11WasmHandler3new17h5fc68705e3ca55abE",
            "_ZN7average4main17hf7ad8001d8e62d36E",
            "_ZN10serde_json2de10from_slice17hdd3bb8950174fcfeE",
        },
    ),
    (
        21,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h9de3fb10534191ecE",
            "_ZN66_$LT$dyn$u20$serde..de..Expected$u20$as$u20$core..fmt..Display$GT$3fmt17hdbcd92be9d002169E",
        },
    ),
    (
        22,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17ha90a60a34c64cf90E",
            "_ZN67_$LT$serde_json..error..ErrorCode$u20$as$u20$core..fmt..Display$GT$3fmt17h565cb979b4cadb07E",
            "_ZN3std3sys4wasi2os12error_string17had64c3a78dac67a7E",
            "_ZN60_$LT$std..io..error..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h0f6ae3c93e0a5927E",
        },
    ),
    (
        23,
        {
            "_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h65d91cddd929f956E",
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h04cbfdf604198c2bE",
            "_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h282e06a9777bda1aE",
            "_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h5b63c94463b3568aE",
        },
    ),
    (
        24,
        {
            "_ZN4core3fmt5Write10write_char17h245f7a2376d4bb1dE",
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h09f944ada069202dE",
        },
    ),
    (
        25,
        {
            "_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h56d43fc6276dab1cE",
            "_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h946ccc0f0f53c29dE",
        },
    ),
    (
        26,
        {
            "_ZN4core3num6bignum8Big32x408mul_pow217h39aa59e374826d79E",
            "_ZN4core3fmt9Formatter19pad_formatted_parts17hd5c211d81ae09dddE",
            "_ZN4core3fmt9Formatter21write_formatted_parts17h725cdb72cd3aa55bE",
            "_ZN4core3num6bignum8Big32x4010mul_digits17hdaa2e19dac67c30eE",
            "_ZN4core3num7flt2dec8strategy6dragon9mul_pow1017h7a5caf359492ba19E",
            "_ZN4core3num7flt2dec8strategy5grisu19format_shortest_opt17h97e22ec180851e30E",
            "_ZN4core3fmt5float32float_to_decimal_common_shortest17h74a6431301deffafE",
            "_ZN4core3num7flt2dec8strategy6dragon15format_shortest17h066aadd4bd4d1a83E",
        },
    ),
    (
        27,
        {
            "_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17hee8cb3c84c71bf25E",
            "_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hb9cb46f78ca0fe47E.llvm.5760601896950577691",
        },
    ),
    (
        28,
        {
            "_ZN4core3num7flt2dec8strategy5grisu16format_exact_opt17h98affe222a7e9bbeE",
            "_ZN4core3num7flt2dec8strategy5grisu16format_exact_opt14possibly_round17hb4e246bddc827755E",
        },
    ),
    (
        29,
        {
            "_ZN4core3fmt5float29float_to_decimal_common_exact17ha5b99a8e875d3aaeE",
            "_ZN4core3num7flt2dec8strategy6dragon12format_exact17h692c7b3b3786750cE",
            "_ZN4core3fmt5float52_$LT$impl$u20$core..fmt..Display$u20$for$u20$f64$GT$3fmt17h71a8fa833bb487b0E",
        },
    ),
    (
        30,
        {
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha98d1ab684364130E",
            "_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h6d44c5f03c128b8fE",
            "_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h129696570e3d9485E",
        },
    ),
    (
        31,
        {
            "_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h7731552759d35a1cE",
            "_ZN3std4sync4once4Once9call_once28_$u7b$$u7b$closure$u7d$$u7d$17h2225a66273ab1f40E",
        },
    ),
    (
        32,
        {
            "_ZN62_$LT$std..ffi..c_str..NulError$u20$as$u20$core..fmt..Debug$GT$3fmt17h33b3abf3de59a920E",
            "_ZN4core3fmt9Formatter11debug_tuple17heeeb2dade3f531d0E",
            "_ZN4core3fmt8builders10DebugTuple5field17hcb1b5b53394eb7d4E",
            "_ZN4core3fmt8builders10DebugTuple6finish17h79f75e9fc978055aE",
        },
    ),
    (
        33,
        {
            "_ZN4core3fmt8builders11DebugStruct5field17h8a352b05fe1d7855E",
            "_ZN64_$LT$core..str..error..Utf8Error$u20$as$u20$core..fmt..Debug$GT$3fmt17he06f340e7fe64d68E",
        },
    ),
    (
        34,
        {
            "_ZN43_$LT$bool$u20$as$u20$core..fmt..Display$GT$3fmt17hb977ca38eb86ee1cE",
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h66ab7036f5163597E",
        },
    ),
    (
        35,
        {
            "_ZN91_$LT$std..sys_common..backtrace.._print..DisplayBacktrace$u20$as$u20$core..fmt..Display$GT$3fmt17hdbcb6fda658fec14E",
            "_ZN3std3env11current_dir17haf843bdc9724e51cE",
        },
    ),
    (
        36,
        {
            "_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17h9a424bca7ce85da9E",
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hef9460027918e8e5E.llvm.9244666002171645713",
        },
    ),
    (
        37,
        {
            "_ZN4core3fmt8builders10DebugInner5entry17ha55848ab19162233E",
            "_ZN4core3fmt8builders8DebugSet5entry17h0623be837afb140eE",
        },
    ),
    (
        38,
        {
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf2a1e1b682b5747fE",
            "_ZN4core3fmt8builders9DebugList6finish17heb9dad8924f14756E",
            "_ZN4core3fmt9Formatter10debug_list17h2f0752160d614faeE",
        },
    ),
    (
        39,
        {
            "_ZN41_$LT$T$u20$as$u20$serde..de..Expected$GT$3fmt17ha0ae57c25a65bc30E",
            "_ZN143_$LT$serde..de..impls..$LT$impl$u20$serde..de..Deserialize$u20$for$u20$f64$GT$..deserialize..PrimitiveVisitor$u20$as$u20$serde..de..Visitor$GT$9expecting17h903162486519f144E",
        },
    ),
    (
        40,
        {
            "_ZN4core3ptr13drop_in_place17hc62d1ba0050c778fE",
        },
    ),
    (
        41,
        {
            "_ZN4core3ops8function5FnMut8call_mut17h727c5760480f6b4fE",
        },
    ),
    (
        42,
        {
            "_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h7bc1dd08437654abE.llvm.5760601896950577691",
        },
    ),
    (
        43,
        {
            "_ZN90_$LT$std..panicking..begin_panic_handler..PanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$8take_box17hb422cde82532b196E",
        },
    ),
    (
        44,
        {
            "_ZN4core3fmt5Write10write_char17h8a674703c8e87f63E",
        },
    ),
    (
        45,
        {
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0fc6679bb1101602E",
        },
    ),
    (
        46,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hd95e88f1376ae6caE",
        },
    ),
    (
        47,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h429315964311f26eE",
        },
    ),
    (
        48,
        {
            "__rdl_alloc",
        },
    ),
    (
        49,
        {
            "_ZN4core3ptr13drop_in_place17h1508c1205ff902bbE",
        },
    ),
    (
        50,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h02f77502437034d9E.llvm.2600633496408617334",
        },
    ),
    (
        51,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h13bcefbc01d1f444E.llvm.9244666002171645713",
        },
    ),
    (
        52,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h1e01e99a30e3a010E.llvm.2600633496408617334",
        },
    ),
    (
        53,
        {
            "_ZN4core3ptr13drop_in_place17h00e6f7cf1e823730E",
        },
    ),
    (
        54,
        {
            "_ZN58_$LT$alloc..string..String$u20$as$u20$core..fmt..Debug$GT$3fmt17h7ba0c86308e7dceeE",
        },
    ),
    (
        55,
        {
            "calloc",
        },
    ),
    (
        56,
        {
            "_ZN79_$LT$serde_json..value..de..SeqDeserializer$u20$as$u20$serde..de..SeqAccess$GT$9size_hint17h215e838afabd2f78E",
        },
    ),
    (
        57,
        {
            "_ZN5alloc6string104_$LT$impl$u20$core..convert..From$LT$alloc..string..String$GT$$u20$for$u20$alloc..vec..Vec$LT$u8$GT$$GT$4from17h426fcfd48e33b3f0E",
        },
    ),
    (
        58,
        {
            "_ZN3std5error5Error5cause17hecb71446800c3e71E",
        },
    ),
    (
        59,
        {
            "_ZN68_$LT$serde_json..read..StrRead$u20$as$u20$serde_json..read..Read$GT$13peek_position17h84045597efb6f37bE",
        },
    ),
    (
        60,
        {
            "_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h6ff9f042aa6c32f4E",
        },
    ),
    (
        61,
        {
            "_ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$8take_box17hbf3d52f67cd70cc5E",
        },
    ),
    (
        62,
        {
            "_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h98464c479cf6eea9E",
        },
    ),
    (
        63,
        {
            "dlmalloc",
        },
    ),
    (
        64,
        {
            "__multi3",
        },
    ),
    (
        65,
        {
            "memcmp",
        },
    ),
    (
        66,
        {
            "_ZN5alloc11collections5btree6search11search_tree17h32a718e87c44453fE",
        },
    ),
    (
        67,
        {
            "_ZN4core3ops8function5impls71_$LT$impl$u20$core..ops..function..FnMut$LT$A$GT$$u20$for$u20$$RF$F$GT$8call_mut17he0fcd465d384c7aaE",
        },
    ),
    (
        68,
        {
            "_ZN60_$LT$serde..de..Unexpected$u20$as$u20$core..fmt..Display$GT$3fmt17h01b77d90609b50d9E",
        },
    ),
    (
        69,
        {
            "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hf7e256a7acecf50fE",
        },
    ),
    (
        70,
        {
            "__strchrnul",
        },
    ),
    (
        71,
        {
            "dlfree",
        },
    ),
    (
        72,
        {
            "_ZN4core3ptr13drop_in_place17h88886004703ec808E.llvm.5760601896950577691",
        },
    ),
    (
        73,
        {
            "_ZN4core3ptr13drop_in_place17h4b668c8b44900f6fE.llvm.15008056854182867539",
        },
    ),
    (
        74,
        {
            "main",
        },
    ),
    (
        75,
        {
            "_ZN45_$LT$$RF$T$u20$as$u20$core..fmt..UpperHex$GT$3fmt17hdd659619c85a2806E",
        },
    ),
    (
        76,
        {
            "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hbf183aa937714250E",
        },
    ),
    (
        77,
        {
            "_ZN4core3f6421_$LT$impl$u20$f64$GT$8classify17h589554e7cc89e0feE",
        },
    ),
    (
        78,
        {
            "_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17hc4bb512c034ca101E",
        },
    ),
    (
        79,
        {
            "__rust_alloc",
        },
    ),
    (
        80,
        {
            "_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc60f63cda20ff0bcE",
        },
    ),
    (
        81,
        {
            "_ZN4core5panic9PanicInfo8location17h421341169dd33d0aE",
        },
    ),
    (
        82,
        {
            "memcpy",
        },
    ),
    (
        83,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h3c61217728ab0ec5E.llvm.9244666002171645713",
        },
    ),
    (
        84,
        {
            "_ZN3std5alloc24default_alloc_error_hook17h22f1097f7c1f2248E",
        },
    ),
    (
        85,
        {
            "_ZN4core3str5lossy9Utf8Lossy10from_bytes17h29ed77f000cbca3eE",
        },
    ),
    (
        86,
        {
            "__wasm_call_dtors",
        },
    ),
    (
        87,
        {
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h936f165ddc1ba15dE",
        },
    ),
    (
        88,
        {
            "_ZN4core3str8converts9from_utf817h38fa95334bc115caE",
        },
    ),
    (
        89,
        {
            "_ZN4core3ptr13drop_in_place17h43f718f834090c67E",
        },
    ),
    (
        90,
        {
            "_ZN64_$LT$std..sys..wasi..stdio..Stderr$u20$as$u20$std..io..Write$GT$17is_write_vectored17h9a9a44e981442e4cE",
        },
    ),
    (
        91,
        {
            "__rust_dealloc",
        },
    ),
    (
        92,
        {
            "_ZN4core3ptr13drop_in_place17hb601c8862632e9d0E.llvm.6739483727811736919",
        },
    ),
    (
        93,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hba2bf7d10128d676E.llvm.2600633496408617334",
        },
    ),
    (
        94,
        {
            "memset",
        },
    ),
    (
        95,
        {
            "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h1e726df7d44c575aE",
        },
    ),
    (
        96,
        {
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h477ee74fc7c8507dE",
        },
    ),
    (
        97,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hf6b1b0a723695f8dE",
        },
    ),
    (
        98,
        {
            "_ZN3std9panicking11panic_count17is_zero_slow_path17h67215868696f4ee3E",
        },
    ),
    (
        99,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3c5642fa58f077a8E",
        },
    ),
    (
        100,
        {
            "_ZN4core3ptr13drop_in_place17h0004e302d1c67d0eE",
        },
    ),
    (
        101,
        {
            "_ZN4core3ptr13drop_in_place17ha310a246575d80e8E",
        },
    ),
    (
        102,
        {
            "_ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$3get17hb89b7aa16723efbaE",
        },
    ),
    (
        103,
        {
            "_ZN4core3fmt9Formatter15debug_upper_hex17h4ed5a5602d7eb453E",
        },
    ),
    (
        104,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hf4533e086a876a89E",
        },
    ),
    (
        105,
        {
            "strlen",
        },
    ),
    (
        106,
        {
            "dispose_chunk",
        },
    ),
    (
        107,
        {
            "_ZN3std7process5abort17hd4f877547ffc3364E",
        },
    ),
    (
        108,
        {
            "_ZN3std2io5Write18write_all_vectored17h2f3bc2526d180aadE",
        },
    ),
    (
        109,
        {
            "aligned_alloc",
        },
    ),
    (
        110,
        {
            "_ZN3std2io5impls71_$LT$impl$u20$std..io..Write$u20$for$u20$alloc..boxed..Box$LT$W$GT$$GT$9write_fmt17hbb62c4e1d9fcd07eE",
        },
    ),
    (
        111,
        {
            "__lshrti3",
        },
    ),
    (
        112,
        {
            "_ZN10serde_json6number6Number10unexpected17h058d566bbade0395E",
        },
    ),
    (
        113,
        {
            "_ZN243_$LT$std..error..$LT$impl$u20$core..convert..From$LT$alloc..string..String$GT$$u20$for$u20$alloc..boxed..Box$LT$dyn$u20$std..error..Error$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$..from..StringError$u20$as$u20$std..error..Error$GT$11description17h2cf077101067a5dcE",
        },
    ),
    (
        114,
        {
            "_ZN82_$LT$core..char..EscapeDebug$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17had27b7e83f85af5fE",
        },
    ),
    (
        115,
        {
            "_ZN4core5panic8Location4file17h51bcfda52921e74dE",
        },
    ),
    (
        116,
        {
            "__lctrans",
        },
    ),
    (
        117,
        {
            "free",
        },
    ),
    (
        118,
        {
            "_ZN3std3sys4wasi17decode_error_kind17hf7df28fba2cac61eE",
        },
    ),
    (
        119,
        {
            "_ZN63_$LT$core..cell..BorrowMutError$u20$as$u20$core..fmt..Debug$GT$3fmt17hd1dfca7cd28a2f35E",
        },
    ),
    (
        120,
        {
            "_ZN4core3num60_$LT$impl$u20$core..str..traits..FromStr$u20$for$u20$u32$GT$8from_str17hd99c40ffee677c4aE",
        },
    ),
    (
        121,
        {
            "_ZN3std2io5impls71_$LT$impl$u20$std..io..Write$u20$for$u20$alloc..boxed..Box$LT$W$GT$$GT$14write_vectored17hd2bcf5f1d70e0987E",
        },
    ),
    (
        122,
        {
            "_ZN4core3ops8function2Fn4call17h81af0eec0d3bdd5fE",
        },
    ),
    (
        123,
        {
            "_ZN4core3ptr13drop_in_place17h86299b6b641ad8a7E",
        },
    ),
    (
        124,
        {
            "_ZN59_$LT$std..process..ChildStdin$u20$as$u20$std..io..Write$GT$5flush17h79dc61b27055a9f7E",
        },
    ),
    (
        125,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hdb71694abc6665bcE",
        },
    ),
    (
        126,
        {
            "_ZN93_$LT$std..panicking..begin_panic_handler..StrPanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$3get17h2ca03c926b5c28e2E",
        },
    ),
    (
        127,
        {
            "_ZN82_$LT$std..sys_common..poison..PoisonError$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5453fb3bc4b96336E",
        },
    ),
    (
        128,
        {
            "realloc",
        },
    ),
    (
        129,
        {
            "sbrk",
        },
    ),
    (
        130,
        {
            "_ZN4core3ptr13drop_in_place17h286ac80c35ac4400E.llvm.2600633496408617334",
        },
    ),
    (
        131,
        {
            "_ZN4core3ptr13drop_in_place17hf49b0681bb037e3aE.llvm.9244666002171645713",
        },
    ),
    (
        132,
        {
            "_ZN3ryu6pretty8format6417h6ade3c82cd786a35E",
        },
    ),
    (
        133,
        {
            "_ZN242_$LT$std..error..$LT$impl$u20$core..convert..From$LT$alloc..string..String$GT$$u20$for$u20$alloc..boxed..Box$LT$dyn$u20$std..error..Error$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$..from..StringError$u20$as$u20$core..fmt..Debug$GT$3fmt17h7604155547fbbb12E",
        },
    ),
    (
        134,
        {
            "strerror_r",
        },
    ),
    (
        135,
        {
            "_ZN47_$LT$$RF$str$u20$as$u20$serde..de..Expected$GT$3fmt17hde86d27f1b641b29E",
        },
    ),
    (
        136,
        {
            "_ZN10serde_json5value2de42_$LT$impl$u20$serde_json..value..Value$GT$10unexpected17h09c32f7c2b8085a1E",
        },
    ),
    (
        137,
        {
            "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hb7f26642070768f1E",
        },
    ),
    (
        138,
        {
            "_ZN3std3sys4wasi7process8ExitCode6as_i3217ha4ceffd7426c225dE",
        },
    ),
    (
        139,
        {
            "_ZN4core3ptr13drop_in_place17ha1b02a6bb0d5196bE",
        },
    ),
    (
        140,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h1a6561d14fa56d79E",
        },
    ),
    (
        141,
        {
            "_ZN4core3str5lossy9Utf8Lossy6chunks17h2a5e9583e5751e83E",
        },
    ),
    (
        142,
        {
            "_ZN80_$LT$std..io..Write..write_fmt..Adaptor$LT$T$GT$$u20$as$u20$core..fmt..Write$GT$9write_str17h781fa1c819eeb1edE",
        },
    ),
    (
        143,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h63b606714df10069E",
        },
    ),
    (
        144,
        {
            "__rust_start_panic",
        },
    ),
    (
        145,
        {
            "_ZN60_$LT$alloc..string..String$u20$as$u20$core..fmt..Display$GT$3fmt17hda3822afbf52b3baE",
        },
    ),
    (
        146,
        {
            "_ZN3std2io5impls71_$LT$impl$u20$std..io..Write$u20$for$u20$alloc..boxed..Box$LT$W$GT$$GT$17is_write_vectored17h81d03f49bc3000a4E",
        },
    ),
    (
        147,
        {
            "_ZN4core3ptr13drop_in_place17h4fa265d37453c2aeE",
        },
    ),
    (
        148,
        {
            "strncmp",
        },
    ),
    (
        149,
        {
            "_ZN4core3fmt9Formatter15debug_lower_hex17hdb55d5b2cd737923E",
        },
    ),
    (
        150,
        {
            "_ZN41_$LT$T$u20$as$u20$serde..de..Expected$GT$3fmt17he50f420106409094E",
        },
    ),
    (
        151,
        {
            "__rdl_realloc",
        },
    ),
    (
        152,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hade9cae1c89bff68E",
        },
    ),
    (
        153,
        {
            "_ZN10serde_json5value2de15SeqDeserializer3new17h65c31d8e54687d5aE",
        },
    ),
    (
        154,
        {
            "_ZN4core3ptr13drop_in_place17h7709c01d3e7a6060E.llvm.18196528527515301292",
        },
    ),
    (
        155,
        {
            "_ZN5alloc11collections5btree4node10splitpoint17h7abae320261f89b8E",
        },
    ),
    (
        156,
        {
            "_ZN4wasi5error5Error9raw_error17h2e5cb1200f7ee65eE",
        },
    ),
    (
        157,
        {
            "_ZN93_$LT$std..panicking..begin_panic_handler..StrPanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$8take_box17h61566771b4804deeE",
        },
    ),
    (
        158,
        {
            "_ZN5alloc11collections5btree8navigate25next_kv_unchecked_dealloc17h526497e1d51a09deE",
        },
    ),
    (
        159,
        {
            "__rust_alloc_zeroed",
        },
    ),
    (
        160,
        {
            "_ZN43_$LT$char$u20$as$u20$core..fmt..Display$GT$3fmt17h25d2500b4d0bfe54E",
        },
    ),
    (
        161,
        {
            "_ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$8take_box17haabce0a54f766c15E",
        },
    ),
    (
        162,
        {
            "strerror",
        },
    ),
    (
        163,
        {
            "_ZN3ryu6pretty8mantissa19write_mantissa_long17h6fe22da5b9386029E",
        },
    ),
    (
        164,
        {
            "_ZN3std5error5Error7type_id17hb2616b0234930cbaE",
        },
    ),
    (
        165,
        {
            "_ZN4core3fmt5Write9write_fmt17h1932f9b8b4abf9b4E",
        },
    ),
    (
        166,
        {
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1dba34855f5ddd12E",
        },
    ),
    (
        167,
        {
            "_ZN3ryu3d2s3d2d17h6fca4883f01edddbE",
        },
    ),
    (
        168,
        {
            "_ZN3std3sys4wasi14abort_internal17h20dd09cea3089554E",
        },
    ),
    (
        169,
        {
            "_ZN4core3ptr13drop_in_place17ha5e37b7b0fc69590E",
        },
    ),
    (
        170,
        {
            "_ZN4core5panic8Location6caller17hbf495a1c8bd3310dE",
        },
    ),
    (
        171,
        {
            "_ZN4core3ptr13drop_in_place17h7d1e94c6af9a81cbE.llvm.17576869749007264814",
        },
    ),
    (
        172,
        {
            "_ZN64_$LT$std..sys..wasi..stdio..Stderr$u20$as$u20$std..io..Write$GT$14write_vectored17h62b7e673283ae3e7E",
        },
    ),
    (
        173,
        {
            "_ZN64_$LT$std..sys..wasi..stdio..Stderr$u20$as$u20$std..io..Write$GT$5write17hf35dc01fc5f6bdd4E",
        },
    ),
    (
        174,
        {
            "_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5e361618dfa1d62aE",
        },
    ),
    (
        175,
        {
            "_ZN4core3ptr13drop_in_place17he8ed907dbac62b69E",
        },
    ),
    (
        176,
        {
            "_ZN3std5error5Error9backtrace17h1af4011e70f5fa7bE",
        },
    ),
    (
        177,
        {
            "_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h6000b8f736c9c0a9E",
        },
    ),
    (
        178,
        {
            "__rust_realloc",
        },
    ),
    (
        179,
        {
            "_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17h2161e0342b78f830E",
        },
    ),
    (
        180,
        {
            "_ZN10serde_json4read7StrRead3new17h387a6684d16fc3f7E",
        },
    ),
    (
        181,
        {
            "_ZN3std2io5impls71_$LT$impl$u20$std..io..Write$u20$for$u20$alloc..boxed..Box$LT$W$GT$$GT$5write17h746243924e0ce1a3E",
        },
    ),
    (
        182,
        {
            "_ZN4core3fmt5Write9write_fmt17h01fa7c639fa46ee4E",
        },
    ),
    (
        183,
        {
            "_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h78538c20862079e1E",
        },
    ),
    (
        184,
        {
            "_ZN4core5panic9PanicInfo7message17h596009f7a73a56c8E",
        },
    ),
    (
        185,
        {
            "memmove",
        },
    ),
    (
        186,
        {
            "_ZN4core3ptr13drop_in_place17hf4d77907b546ae6fE",
        },
    ),
    (
        187,
        {
            "_ZN4core3ops8function5impls68_$LT$impl$u20$core..ops..function..Fn$LT$A$GT$$u20$for$u20$$RF$F$GT$4call17h95ecab5eb8686645E",
        },
    ),
    (
        188,
        {
            "__rdl_dealloc",
        },
    ),
    (
        189,
        {
            "_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h88cf8d8fd237266fE",
        },
    ),
    (
        190,
        {
            "_ZN4core3ptr13drop_in_place17h1434623084598ac9E_1",
        },
    ),
    (
        191,
        {
            "_ZN5alloc11collections5btree8navigate25next_kv_unchecked_dealloc17h0d8b629a227ba839E",
        },
    ),
    (
        192,
        {
            "_ZN4core3ops8function6FnOnce9call_once17h08ab5a17f5b9e79bE",
        },
    ),
    (
        193,
        {
            "_ZN55_$LT$str$u20$as$u20$serde_json..value..index..Index$GT$10index_into17hec2f9ccca1f085daE",
        },
    ),
    (
        194,
        {
            "malloc",
        },
    ),
    (
        195,
        {
            "_ZN3std2io5Write18write_all_vectored17he2fb82273952c364E",
        },
    ),
    (
        196,
        {
            "_ZN90_$LT$std..panicking..begin_panic_handler..PanicPayload$u20$as$u20$core..panic..BoxMeUp$GT$3get17he56cdc7f59389c1bE",
        },
    ),
    (
        197,
        {
            "internal_memalign",
        },
    ),
    (
        198,
        {
            "__rdl_alloc_zeroed",
        },
    ),
    (
        199,
        {
            "dummy_1",
        },
    ),
    (
        200,
        {
            "_ZN3std2io5impls71_$LT$impl$u20$std..io..Write$u20$for$u20$alloc..boxed..Box$LT$W$GT$$GT$9write_all17h59682540c2892ab8E",
        },
    ),
    (
        201,
        {
            "dummy",
        },
    ),
    (
        202,
        {
            "_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h26527d1fc5a43455E",
        },
    ),
    (
        203,
        {
            "_ZN3std2io5impls71_$LT$impl$u20$std..io..Write$u20$for$u20$alloc..boxed..Box$LT$W$GT$$GT$5flush17h8a72662c5afae1afE",
        },
    ),
    (
        204,
        {
            "_ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$3get17haaf1b3636a41153dE",
        },
    ),
    (
        205,
        {
            "_ZN4core3ptr13drop_in_place17h3fa943c3f067fe68E",
        },
    ),
    (
        206,
        {
            "_ZN60_$LT$core..cell..BorrowError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4f623d30f9ec6c32E",
        },
    ),
    (
        207,
        {
            "abort",
        },
    ),
    (
        208,
        {
            "_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h6383c27ca514bb89E",
        },
    ),
]
Compiled: 373 functions
Entry point: 370
Globals buffer: 3
interleaved: true
PlatformId(0x7fff0000)
[DeviceId(0xffffffff)]
DeviceId(0xffffffff)
Device type: Ok(CPU)
Device name: Ok(Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz)
Vendor: Ok(Intel)
OpenCL Version: Ok(1.2)
OpenCL C Version: Ok(OpenCL C 1.2)
Num. compute units: Ok(8)
Max param size: Ok(4096)
Max global mem size: Ok(17179869184)
Max constant buffer size: Ok(65536)
Linker available: Ok(true)
OpenCL Extensions: Ok(cl_APPLE_SetMemObjectDestructor cl_APPLE_ContextLoggingFunctions cl_APPLE_clut cl_APPLE_query_kernel_names cl_APPLE_gl_sharing cl_khr_gl_event cl_khr_fp64 cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_byte_addressable_store cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_khr_3d_image_writes cl_khr_image2d_from_buffer cl_APPLE_fp64_basic_ops cl_APPLE_fixed_alpha_channel_orders cl_APPLE_biased_fixed_point_image_formats cl_APPLE_command_queue_priority)
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: 

################################ OPENCL ERROR ############################### 

Error executing function: clLinkProgram  

Status error code: CL_LINK_PROGRAM_FAILURE (-17)  

Please visit the following url for more information: 

https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/clLinkProgram.html#errors  

############################################################################# 
', src/opencl_runner.rs:595:206
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: 

################################ OPENCL ERROR ############################### 

Error executing function: clLinkProgram  

Status error code: CL_LINK_PROGRAM_FAILURE (-17)  

Please visit the following url for more information: 

https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/clLinkProgram.html#errors  

############################################################################# 
', src/opencl_runner.rs:595:206
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: 

################################ OPENCL ERROR ############################### 

Error executing function: clLinkProgram  

Status error code: CL_LINK_PROGRAM_FAILURE (-17)  

Please visit the following url for more information: 

https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/clLinkProgram.html#errors  

############################################################################# 
', src/opencl_runner.rs:595:206
